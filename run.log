# vsim -vopt work.tb -voptargs="+acc=npr" -assertdebug -l run.log -coverage -c -do "coverage save -onexit -assert -directive -cvg -codeAll coverage.ucdb; coverage report -detail;run -all; exit" 
# Start time: 10:58:58 on Aug 06,2025
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# //  Questa Sim
# //  Version 10.6c linux Jul 25 2017
# //
# //  Copyright 1991-2017 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  QuestaSim and its associated documentation contain trade
# //  secrets and commercial or financial information that are the property of
# //  Mentor Graphics Corporation and are privileged, confidential,
# //  and exempt from disclosure under the Freedom of Information Act,
# //  5 U.S.C. Section 552. Furthermore, this information
# //  is prohibited from disclosure under the Trade Secrets Act,
# //  18 U.S.C. Section 1905.
# //
# Loading sv_std.std
# Loading mtiUvm.uvm_pkg
# Loading work.ral_top_sv_unit(fast)
# Loading work.tb(fast)
# Loading work.ral_if(fast)
# Loading work.top(fast)
# Loading mtiUvm.questa_uvm_pkg(fast)
# Loading work.ral_if(fast)
# Loading /tools/mentor/questasim_10.6c/questasim/uvm-1.1d/linux/uvm_dpi.so
# coverage save -onexit -assert -directive -cvg -codeAll coverage.ucdb
#  coverage report -detail
# Coverage Report by file with details
# 
# =================================================================================
# === File: design.v
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                           18         0        18       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file design.v --
# 
#     1                                                module top 
#     2                                                (  
#     3                                                    input               pclk,
#     4                                                    input               presetn,
#     5                                                    input   [31 : 0]    paddr,
#     6                                                    input   [31 : 0]    pwdata,
#     7                                                    input               psel,
#     8                                                    input               pwrite,
#     9                                                    input               penable,
#     10                                                   output  [31 : 0]    prdata
#     11                                               );
#     12                                                
#     13                                                 reg [3:0]  cntrl = 0; ///   cntrl :  [reg4 reg3 reg2 reg1]
#     14                                                 reg [31:0] reg1  = 0; //    datainput 1
#     15                                                 reg [31:0] reg2  = 0; ///   datainput 2
#     16                                                 reg [31:0] reg3  = 0; ///   datainput 3
#     17                                                 reg [31:0] reg4  = 0; //    datainput 4
#     18                                                   
#     19                                                 reg     [31 : 0]    rdata_tmp = 0;    
#     20                                                   // Set all registers to default values
#     21              1                    ***0***         always @ (posedge pclk) 
#     22                                                     begin
#     23                                                       if( !presetn ) 
#     24                                                       begin
#     25              1                    ***0***                cntrl    <= 4'h0;
#     26              1                    ***0***                reg1     <= 32'h5A5A_5555;
#     27              1                    ***0***                reg2     <= 32'h1234_9876;
#     28              1                    ***0***                reg3     <= 32'hA5A5_0000;
#     29              1                    ***0***                reg4     <= 32'h0000_FFFF;
#     30              1                    ***0***               rdata_tmp <= 32'h00000000;
#     31                                                       end
#     32                                                     ////////////update values of register
#     33                                                       else if( psel && penable && pwrite )
#     34                                                       begin
#     35                                                           case( paddr )
#     36              1                    ***0***                     'h0     : cntrl <= pwdata;
#     37              1                    ***0***                     'h4     : reg1  <= pwdata;//bug 
#     38              1                    ***0***                     'h8     : reg2  <= pwdata;
#     39              1                    ***0***                     'hc     : reg3  <= pwdata;
#     40              1                    ***0***                     'h10    : reg4  <= pwdata;
#     41                                                           endcase
#     42                                                       end
#     43                                                       else if (psel && penable && !pwrite )
#     44                                                        begin
#     45                                                          case( paddr )
#     46              1                    ***0***                     'h0     : rdata_tmp <= {28'h0000000,cntrl};
#     47              1                    ***0***                     'h4     : rdata_tmp <= reg1;
#     48              1                    ***0***                     'h8     : rdata_tmp <= reg2;
#     49              1                    ***0***                     'hc     : rdata_tmp <= reg3;
#     50              1                    ***0***                     'h10    : rdata_tmp <= reg4;
#     51              1                    ***0***                     default : rdata_tmp <= 32'h00000000;
#     52                                                           endcase 
#     53                                                        end      
#     54                                                   end   
#     55                                               assign prdata =  rdata_tmp;
#     56                                               endmodule
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                        16         0        16       0.0
# 
# ================================Branch Details================================
# 
# Branch Coverage for file design.v --
# 
# ------------------------------------IF Branch------------------------------------
#     23                                   ***0***     Count coming in to IF
#     23              1                    ***0***             if( !presetn ) 
#     33              1                    ***0***             else if( psel && penable && pwrite )
#     43              1                    ***0***             else if (psel && penable && !pwrite )
#                                          ***0***     All False Count
# Branch totals: 0 hits of 4 branches = 0.0%
# 
# ------------------------------------CASE Branch------------------------------------
#     35                                   ***0***     Count coming in to CASE
#     36              1                    ***0***                     'h0     : cntrl <= pwdata;
#     37              1                    ***0***                     'h4     : reg1  <= pwdata;//bug 
#     38              1                    ***0***                     'h8     : reg2  <= pwdata;
#     39              1                    ***0***                     'hc     : reg3  <= pwdata;
#     40              1                    ***0***                     'h10    : reg4  <= pwdata;
#                                          ***0***     All False Count
# Branch totals: 0 hits of 6 branches = 0.0%
# 
# ------------------------------------CASE Branch------------------------------------
#     45                                   ***0***     Count coming in to CASE
#     46              1                    ***0***                     'h0     : rdata_tmp <= {28'h0000000,cntrl};
#     47              1                    ***0***                     'h4     : rdata_tmp <= reg1;
#     48              1                    ***0***                     'h8     : rdata_tmp <= reg2;
#     49              1                    ***0***                     'hc     : rdata_tmp <= reg3;
#     50              1                    ***0***                     'h10    : rdata_tmp <= reg4;
#     51              1                    ***0***                     default : rdata_tmp <= 32'h00000000;
# Branch totals: 0 hits of 6 branches = 0.0%
# 
# 
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              6         0         6       0.0
# 
# ================================Condition Details================================
# 
# Condition Coverage for file design.v --
# 
# ----------------Focused Condition View-------------------
# Line       33 Item    1  ((psel && penable) && pwrite)
# Condition totals: 0 of 3 input terms covered = 0.0%
# 
#   Input Term   Covered  Reason for no coverage   Hint
#  -----------  --------  -----------------------  --------------
#         psel         N  No hits                  Hit '_0' and '_1'
#      penable         N  No hits                  Hit '_0' and '_1'
#       pwrite         N  No hits                  Hit '_0' and '_1'
# 
#      Rows:       Hits  FEC Target            Non-masking condition(s)      
#  ---------  ---------  --------------------  -------------------------     
#   Row   1:    ***0***  psel_0                -                             
#   Row   2:    ***0***  psel_1                (pwrite && penable)           
#   Row   3:    ***0***  penable_0             psel                          
#   Row   4:    ***0***  penable_1             (pwrite && psel)              
#   Row   5:    ***0***  pwrite_0              (psel && penable)             
#   Row   6:    ***0***  pwrite_1              (psel && penable)             
# 
# ----------------Focused Condition View-------------------
# Line       43 Item    1  ((psel && penable) && ~pwrite)
# Condition totals: 0 of 3 input terms covered = 0.0%
# 
#   Input Term   Covered  Reason for no coverage   Hint
#  -----------  --------  -----------------------  --------------
#         psel         N  No hits                  Hit '_0' and '_1'
#      penable         N  No hits                  Hit '_0' and '_1'
#       pwrite         N  No hits                  Hit '_0' and '_1'
# 
#      Rows:       Hits  FEC Target            Non-masking condition(s)      
#  ---------  ---------  --------------------  -------------------------     
#   Row   1:    ***0***  psel_0                -                             
#   Row   2:    ***0***  psel_1                (~pwrite && penable)          
#   Row   3:    ***0***  penable_0             psel                          
#   Row   4:    ***0***  penable_1             (~pwrite && psel)             
#   Row   5:    ***0***  pwrite_0              (psel && penable)             
#   Row   6:    ***0***  pwrite_1              (psel && penable)             
# 
# 
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                    530         0       530       0.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File design.v --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
#           3                                   pclk           0           0        0.00 
#           4                                presetn           0           0        0.00 
#           5                               paddr[9]           0           0        0.00 
#           5                               paddr[8]           0           0        0.00 
#           5                               paddr[7]           0           0        0.00 
#           5                               paddr[6]           0           0        0.00 
#           5                               paddr[5]           0           0        0.00 
#           5                               paddr[4]           0           0        0.00 
#           5                               paddr[3]           0           0        0.00 
#           5                              paddr[31]           0           0        0.00 
#           5                              paddr[30]           0           0        0.00 
#           5                               paddr[2]           0           0        0.00 
#           5                              paddr[29]           0           0        0.00 
#           5                              paddr[28]           0           0        0.00 
#           5                              paddr[27]           0           0        0.00 
#           5                              paddr[26]           0           0        0.00 
#           5                              paddr[25]           0           0        0.00 
#           5                              paddr[24]           0           0        0.00 
#           5                              paddr[23]           0           0        0.00 
#           5                              paddr[22]           0           0        0.00 
#           5                              paddr[21]           0           0        0.00 
#           5                              paddr[20]           0           0        0.00 
#           5                               paddr[1]           0           0        0.00 
#           5                              paddr[19]           0           0        0.00 
#           5                              paddr[18]           0           0        0.00 
#           5                              paddr[17]           0           0        0.00 
#           5                              paddr[16]           0           0        0.00 
#           5                              paddr[15]           0           0        0.00 
#           5                              paddr[14]           0           0        0.00 
#           5                              paddr[13]           0           0        0.00 
#           5                              paddr[12]           0           0        0.00 
#           5                              paddr[11]           0           0        0.00 
#           5                              paddr[10]           0           0        0.00 
#           5                               paddr[0]           0           0        0.00 
#           6                              pwdata[9]           0           0        0.00 
#           6                              pwdata[8]           0           0        0.00 
#           6                              pwdata[7]           0           0        0.00 
#           6                              pwdata[6]           0           0        0.00 
#           6                              pwdata[5]           0           0        0.00 
#           6                              pwdata[4]           0           0        0.00 
#           6                              pwdata[3]           0           0        0.00 
#           6                             pwdata[31]           0           0        0.00 
#           6                             pwdata[30]           0           0        0.00 
#           6                              pwdata[2]           0           0        0.00 
#           6                             pwdata[29]           0           0        0.00 
#           6                             pwdata[28]           0           0        0.00 
#           6                             pwdata[27]           0           0        0.00 
#           6                             pwdata[26]           0           0        0.00 
#           6                             pwdata[25]           0           0        0.00 
#           6                             pwdata[24]           0           0        0.00 
#           6                             pwdata[23]           0           0        0.00 
#           6                             pwdata[22]           0           0        0.00 
#           6                             pwdata[21]           0           0        0.00 
#           6                             pwdata[20]           0           0        0.00 
#           6                              pwdata[1]           0           0        0.00 
#           6                             pwdata[19]           0           0        0.00 
#           6                             pwdata[18]           0           0        0.00 
#           6                             pwdata[17]           0           0        0.00 
#           6                             pwdata[16]           0           0        0.00 
#           6                             pwdata[15]           0           0        0.00 
#           6                             pwdata[14]           0           0        0.00 
#           6                             pwdata[13]           0           0        0.00 
#           6                             pwdata[12]           0           0        0.00 
#           6                             pwdata[11]           0           0        0.00 
#           6                             pwdata[10]           0           0        0.00 
#           6                              pwdata[0]           0           0        0.00 
#           7                                   psel           0           0        0.00 
#           8                                 pwrite           0           0        0.00 
#           9                                penable           0           0        0.00 
#          10                              prdata[9]           0           0        0.00 
#          10                              prdata[8]           0           0        0.00 
#          10                              prdata[7]           0           0        0.00 
#          10                              prdata[6]           0           0        0.00 
#          10                              prdata[5]           0           0        0.00 
#          10                              prdata[4]           0           0        0.00 
#          10                              prdata[3]           0           0        0.00 
#          10                             prdata[31]           0           0        0.00 
#          10                             prdata[30]           0           0        0.00 
#          10                              prdata[2]           0           0        0.00 
#          10                             prdata[29]           0           0        0.00 
#          10                             prdata[28]           0           0        0.00 
#          10                             prdata[27]           0           0        0.00 
#          10                             prdata[26]           0           0        0.00 
#          10                             prdata[25]           0           0        0.00 
#          10                             prdata[24]           0           0        0.00 
#          10                             prdata[23]           0           0        0.00 
#          10                             prdata[22]           0           0        0.00 
#          10                             prdata[21]           0           0        0.00 
#          10                             prdata[20]           0           0        0.00 
#          10                              prdata[1]           0           0        0.00 
#          10                             prdata[19]           0           0        0.00 
#          10                             prdata[18]           0           0        0.00 
#          10                             prdata[17]           0           0        0.00 
#          10                             prdata[16]           0           0        0.00 
#          10                             prdata[15]           0           0        0.00 
#          10                             prdata[14]           0           0        0.00 
#          10                             prdata[13]           0           0        0.00 
#          10                             prdata[12]           0           0        0.00 
#          10                             prdata[11]           0           0        0.00 
#          10                             prdata[10]           0           0        0.00 
#          10                              prdata[0]           0           0        0.00 
#          13                               cntrl[3]           0           0        0.00 
#          13                               cntrl[2]           0           0        0.00 
#          13                               cntrl[1]           0           0        0.00 
#          13                               cntrl[0]           0           0        0.00 
#          14                                reg1[9]           0           0        0.00 
#          14                                reg1[8]           0           0        0.00 
#          14                                reg1[7]           0           0        0.00 
#          14                                reg1[6]           0           0        0.00 
#          14                                reg1[5]           0           0        0.00 
#          14                                reg1[4]           0           0        0.00 
#          14                                reg1[3]           0           0        0.00 
#          14                               reg1[31]           0           0        0.00 
#          14                               reg1[30]           0           0        0.00 
#          14                                reg1[2]           0           0        0.00 
#          14                               reg1[29]           0           0        0.00 
#          14                               reg1[28]           0           0        0.00 
#          14                               reg1[27]           0           0        0.00 
#          14                               reg1[26]           0           0        0.00 
#          14                               reg1[25]           0           0        0.00 
#          14                               reg1[24]           0           0        0.00 
#          14                               reg1[23]           0           0        0.00 
#          14                               reg1[22]           0           0        0.00 
#          14                               reg1[21]           0           0        0.00 
#          14                               reg1[20]           0           0        0.00 
#          14                                reg1[1]           0           0        0.00 
#          14                               reg1[19]           0           0        0.00 
#          14                               reg1[18]           0           0        0.00 
#          14                               reg1[17]           0           0        0.00 
#          14                               reg1[16]           0           0        0.00 
#          14                               reg1[15]           0           0        0.00 
#          14                               reg1[14]           0           0        0.00 
#          14                               reg1[13]           0           0        0.00 
#          14                               reg1[12]           0           0        0.00 
#          14                               reg1[11]           0           0        0.00 
#          14                               reg1[10]           0           0        0.00 
#          14                                reg1[0]           0           0        0.00 
#          15                                reg2[9]           0           0        0.00 
#          15                                reg2[8]           0           0        0.00 
#          15                                reg2[7]           0           0        0.00 
#          15                                reg2[6]           0           0        0.00 
#          15                                reg2[5]           0           0        0.00 
#          15                                reg2[4]           0           0        0.00 
#          15                                reg2[3]           0           0        0.00 
#          15                               reg2[31]           0           0        0.00 
#          15                               reg2[30]           0           0        0.00 
#          15                                reg2[2]           0           0        0.00 
#          15                               reg2[29]           0           0        0.00 
#          15                               reg2[28]           0           0        0.00 
#          15                               reg2[27]           0           0        0.00 
#          15                               reg2[26]           0           0        0.00 
#          15                               reg2[25]           0           0        0.00 
#          15                               reg2[24]           0           0        0.00 
#          15                               reg2[23]           0           0        0.00 
#          15                               reg2[22]           0           0        0.00 
#          15                               reg2[21]           0           0        0.00 
#          15                               reg2[20]           0           0        0.00 
#          15                                reg2[1]           0           0        0.00 
#          15                               reg2[19]           0           0        0.00 
#          15                               reg2[18]           0           0        0.00 
#          15                               reg2[17]           0           0        0.00 
#          15                               reg2[16]           0           0        0.00 
#          15                               reg2[15]           0           0        0.00 
#          15                               reg2[14]           0           0        0.00 
#          15                               reg2[13]           0           0        0.00 
#          15                               reg2[12]           0           0        0.00 
#          15                               reg2[11]           0           0        0.00 
#          15                               reg2[10]           0           0        0.00 
#          15                                reg2[0]           0           0        0.00 
#          16                                reg3[9]           0           0        0.00 
#          16                                reg3[8]           0           0        0.00 
#          16                                reg3[7]           0           0        0.00 
#          16                                reg3[6]           0           0        0.00 
#          16                                reg3[5]           0           0        0.00 
#          16                                reg3[4]           0           0        0.00 
#          16                                reg3[3]           0           0        0.00 
#          16                               reg3[31]           0           0        0.00 
#          16                               reg3[30]           0           0        0.00 
#          16                                reg3[2]           0           0        0.00 
#          16                               reg3[29]           0           0        0.00 
#          16                               reg3[28]           0           0        0.00 
#          16                               reg3[27]           0           0        0.00 
#          16                               reg3[26]           0           0        0.00 
#          16                               reg3[25]           0           0        0.00 
#          16                               reg3[24]           0           0        0.00 
#          16                               reg3[23]           0           0        0.00 
#          16                               reg3[22]           0           0        0.00 
#          16                               reg3[21]           0           0        0.00 
#          16                               reg3[20]           0           0        0.00 
#          16                                reg3[1]           0           0        0.00 
#          16                               reg3[19]           0           0        0.00 
#          16                               reg3[18]           0           0        0.00 
#          16                               reg3[17]           0           0        0.00 
#          16                               reg3[16]           0           0        0.00 
#          16                               reg3[15]           0           0        0.00 
#          16                               reg3[14]           0           0        0.00 
#          16                               reg3[13]           0           0        0.00 
#          16                               reg3[12]           0           0        0.00 
#          16                               reg3[11]           0           0        0.00 
#          16                               reg3[10]           0           0        0.00 
#          16                                reg3[0]           0           0        0.00 
#          17                                reg4[9]           0           0        0.00 
#          17                                reg4[8]           0           0        0.00 
#          17                                reg4[7]           0           0        0.00 
#          17                                reg4[6]           0           0        0.00 
#          17                                reg4[5]           0           0        0.00 
#          17                                reg4[4]           0           0        0.00 
#          17                                reg4[3]           0           0        0.00 
#          17                               reg4[31]           0           0        0.00 
#          17                               reg4[30]           0           0        0.00 
#          17                                reg4[2]           0           0        0.00 
#          17                               reg4[29]           0           0        0.00 
#          17                               reg4[28]           0           0        0.00 
#          17                               reg4[27]           0           0        0.00 
#          17                               reg4[26]           0           0        0.00 
#          17                               reg4[25]           0           0        0.00 
#          17                               reg4[24]           0           0        0.00 
#          17                               reg4[23]           0           0        0.00 
#          17                               reg4[22]           0           0        0.00 
#          17                               reg4[21]           0           0        0.00 
#          17                               reg4[20]           0           0        0.00 
#          17                                reg4[1]           0           0        0.00 
#          17                               reg4[19]           0           0        0.00 
#          17                               reg4[18]           0           0        0.00 
#          17                               reg4[17]           0           0        0.00 
#          17                               reg4[16]           0           0        0.00 
#          17                               reg4[15]           0           0        0.00 
#          17                               reg4[14]           0           0        0.00 
#          17                               reg4[13]           0           0        0.00 
#          17                               reg4[12]           0           0        0.00 
#          17                               reg4[11]           0           0        0.00 
#          17                               reg4[10]           0           0        0.00 
#          17                                reg4[0]           0           0        0.00 
#          19                           rdata_tmp[9]           0           0        0.00 
#          19                           rdata_tmp[8]           0           0        0.00 
#          19                           rdata_tmp[7]           0           0        0.00 
#          19                           rdata_tmp[6]           0           0        0.00 
#          19                           rdata_tmp[5]           0           0        0.00 
#          19                           rdata_tmp[4]           0           0        0.00 
#          19                           rdata_tmp[3]           0           0        0.00 
#          19                          rdata_tmp[31]           0           0        0.00 
#          19                          rdata_tmp[30]           0           0        0.00 
#          19                           rdata_tmp[2]           0           0        0.00 
#          19                          rdata_tmp[29]           0           0        0.00 
#          19                          rdata_tmp[28]           0           0        0.00 
#          19                          rdata_tmp[27]           0           0        0.00 
#          19                          rdata_tmp[26]           0           0        0.00 
#          19                          rdata_tmp[25]           0           0        0.00 
#          19                          rdata_tmp[24]           0           0        0.00 
#          19                          rdata_tmp[23]           0           0        0.00 
#          19                          rdata_tmp[22]           0           0        0.00 
#          19                          rdata_tmp[21]           0           0        0.00 
#          19                          rdata_tmp[20]           0           0        0.00 
#          19                           rdata_tmp[1]           0           0        0.00 
#          19                          rdata_tmp[19]           0           0        0.00 
#          19                          rdata_tmp[18]           0           0        0.00 
#          19                          rdata_tmp[17]           0           0        0.00 
#          19                          rdata_tmp[16]           0           0        0.00 
#          19                          rdata_tmp[15]           0           0        0.00 
#          19                          rdata_tmp[14]           0           0        0.00 
#          19                          rdata_tmp[13]           0           0        0.00 
#          19                          rdata_tmp[12]           0           0        0.00 
#          19                          rdata_tmp[11]           0           0        0.00 
#          19                          rdata_tmp[10]           0           0        0.00 
#          19                           rdata_tmp[0]           0           0        0.00 
# 
# Total Node Count     =        265 
# Toggled Node Count   =          0 
# Untoggled Node Count =        265 
# 
# Toggle Coverage      =        0.0% (0 of 530 bins)
# 
# =================================================================================
# === File: ral_adapter.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                           20         0        20       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file ral_adapter.sv --
# 
#     1                                                class apb_adapter extends uvm_reg_adapter;
#     2               1                    ***0***       `uvm_object_utils (apb_adapter)
#     2               2                    ***0***     
#     2               3                    ***0***     
#     2               4                    ***0***     
#     2               5                    ***0***     
#     2               6                    ***0***     
#     2               7                    ***0***     
#     2               8                    ***0***     
#     2               9                    ***0***     
#     2              10                    ***0***     
#     3                                                  
#     4                                                  function new (string name = "apb_adapter");
#     5               1                    ***0***         super.new (name);
#     6                                                  endfunction
#     7                                                
#     8                                                  function uvm_sequence_item reg2bus(const ref uvm_reg_bus_op rw);
#     9                                                    apb_transaction apb;
#     10              1                    ***0***         apb = apb_transaction::type_id::create("apb");
#     11              1                    ***0***         apb.PWRITE = (rw.kind == UVM_WRITE) ? 1'b1 : 1'b0;
#     12              1                    ***0***         apb.PADDR = rw.addr;
#     13              1                    ***0***         apb.PWDATA = rw.data;
#     14              1                    ***0***         return apb;
#     15                                                 endfunction
#     16                                               
#     17                                               function void bus2reg(uvm_sequence_item bus_item, ref uvm_reg_bus_op rw);
#     18                                                 apb_transaction apb;
#     19                                                 assert($cast(apb, bus_item));
#     20                                               
#     21              1                    ***0***       rw.kind = (apb.PWRITE == 1'b1) ? UVM_WRITE : UVM_READ;
#     22              1                    ***0***       rw.data = (apb.PWRITE == 1'b1) ? apb.PWDATA : apb.PRDATA;
#     23              1                    ***0***       rw.addr = apb.PADDR;
#     24              1                    ***0***       rw.status = UVM_IS_OK;
#     25                                               endfunction
#     26                                               endclass
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                        14         0        14       0.0
# 
# ================================Branch Details================================
# 
# Branch Coverage for file ral_adapter.sv --
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               1                    ***0***       `uvm_object_utils (apb_adapter)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               2                    ***0***       `uvm_object_utils (apb_adapter)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               3                    ***0***       `uvm_object_utils (apb_adapter)
#     2               4                    ***0***       `uvm_object_utils (apb_adapter)
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               5                    ***0***       `uvm_object_utils (apb_adapter)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               6                    ***0***       `uvm_object_utils (apb_adapter)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     21                                   ***0***     Count coming in to IF
#     21              1                    ***0***       rw.kind = (apb.PWRITE == 1'b1) ? UVM_WRITE : UVM_READ;
#     21              2                    ***0***       rw.kind = (apb.PWRITE == 1'b1) ? UVM_WRITE : UVM_READ;
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     22                                   ***0***     Count coming in to IF
#     22              1                    ***0***       rw.data = (apb.PWRITE == 1'b1) ? apb.PWDATA : apb.PRDATA;
#     22              2                    ***0***       rw.data = (apb.PWRITE == 1'b1) ? apb.PWDATA : apb.PRDATA;
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# 
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      0         0         0     100.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File ral_adapter.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
# 
# Total Node Count     =          0 
# Toggled Node Count   =          0 
# Untoggled Node Count =          0 
# 
# Toggle Coverage      =      100.0% (0 of 0 bins)
# 
# =================================================================================
# === File: ral_agent.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                           10         0        10       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file ral_agent.sv --
# 
#     1                                                class apb_agent extends uvm_agent;
#     2               1                    ***0***       `uvm_component_utils(apb_agent)
#     2               2                    ***0***     
#     2               3                    ***0***     
#     3                                                
#     4                                                  function new(input string inst = "apb_agent", uvm_component parent = null);
#     5               1                    ***0***         super.new(inst, parent);
#     6                                                  endfunction
#     7                                                
#     8                                                  apb_driver drv;
#     9                                                  apb_sequencer seqr;
#     10                                                 apb_monitor mon;
#     11                                               
#     12                                                 virtual function void build_phase(uvm_phase phase);
#     13              1                    ***0***         super.build_phase(phase);
#     14              1                    ***0***         drv = apb_driver::type_id::create("drv", this);
#     15              1                    ***0***         seqr = apb_sequencer::type_id::create("seqr", this);
#     16              1                    ***0***         mon = apb_monitor::type_id::create("mon", this);
#     17                                                 endfunction
#     18                                               
#     19                                                 virtual function void connect_phase(uvm_phase phase);
#     20              1                    ***0***         super.connect_phase(phase);
#     21              1                    ***0***         drv.seq_item_port.connect(seqr.seq_item_export);
#     22                                                 endfunction
#     23                                               endclass
#     24                                               
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                         0         0         0     100.0
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      0         0         0     100.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File ral_agent.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
# 
# Total Node Count     =          0 
# Toggled Node Count   =          0 
# Untoggled Node Count =          0 
# 
# Toggle Coverage      =      100.0% (0 of 0 bins)
# 
# =================================================================================
# === File: ral_driver.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                           37         0        37       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file ral_driver.sv --
# 
#     1                                                class apb_driver extends uvm_driver#(apb_transaction);
#     2               1                    ***0***       `uvm_component_utils(apb_driver)
#     2               2                    ***0***     
#     2               3                    ***0***     
#     3                                                
#     4                                                  virtual ral_if vif;
#     5                                                  apb_transaction tr;
#     6                                                
#     7                                                  function new(string name = "apb_driver", uvm_component parent = null);
#     8               1                    ***0***         super.new(name, parent);
#     9                                                  endfunction
#     10                                               
#     11                                                 virtual function void build_phase(uvm_phase phase);
#     12              1                    ***0***         super.build_phase(phase);
#     13                                                   if (!uvm_config_db#(virtual ral_if)::get(this, "", "vif", vif))
#     14              1                    ***0***           `uvm_error("DRV", "Unable to access interface");
#     15                                                 endfunction
#     16                                               
#     17                                                 virtual task run_phase(uvm_phase phase);
#     18              1                    ***0***         tr = apb_transaction::type_id::create("tr");
#     19              1                    ***0***         forever begin
#     20              1                    ***0***           seq_item_port.get_next_item(tr);
#     21              1                    ***0***           drive(tr);
#     22              1                    ***0***           seq_item_port.item_done();
#     23                                                   end
#     24                                                 endtask
#     25                                               
#     26                                                 task drive(apb_transaction tr);
#     27                                                   if(tr.PWRITE == 1'b1) begin
#     28              1                    ***0***         @(posedge vif.PCLK);
#     29              1                    ***0***         vif.PRESETn <= 1'b1;
#     30              1                    ***0***         vif.PSEL <= 1'b1;
#     31              1                    ***0***         vif.PWDATA <= tr.PWDATA;
#     32              1                    ***0***         vif.PWRITE <= 1'b1;
#     33              1                    ***0***         vif.PADDR <= tr.PADDR;
#     34                                                   
#     35              1                    ***0***         repeat(2) @(posedge vif.PCLK);
#     35              2                    ***0***     
#     36              1                    ***0***         vif.PENABLE <= 1'b1;
#     37              1                    ***0***         `uvm_info("DRV", $sformatf("Data Write -> Wdata : %0h",vif.PWDATA),UVM_NONE);
#     38                                                   
#     39              1                    ***0***         @(posedge vif.PCLK);
#     40              1                    ***0***           vif.PSEL = 1'b0;
#     41              1                    ***0***           vif.PENABLE <= 1'b0;
#     42                                                  end else begin
#     43                                                     
#     44              1                    ***0***           @(posedge vif.PCLK);
#     45              1                    ***0***              vif.PSEL    <= 1'b1;
#     46              1                    ***0***              vif.PADDR   <= tr.PADDR;
#     47              1                    ***0***              vif.PWRITE  <= 1'b0;
#     48                                                       
#     49              1                    ***0***              repeat(2)@(posedge vif.PCLK);
#     49              2                    ***0***     
#     50              1                    ***0***              vif.PENABLE <= 1'b1;
#     51              1                    ***0***              `uvm_info("DRV", $sformatf("Data READ -> read data : %0h",vif.PRDATA),UVM_NONE);
#     52              1                    ***0***           @(posedge vif.PCLK);
#     53              1                    ***0***              vif.PSEL <= 1'b0;
#     54              1                    ***0***              vif.PENABLE <=1'b0;
#     55              1                    ***0***              tr.PRDATA = vif.PRDATA;
#     56                                                     end
#     57              1                    ***0***       `uvm_info("drv",$sformatf("-----------------------------------DRIVER DONE--------------------"), UVM_LOW);
#     58                                                  endtask
#     59                                               endclass
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                        12         0        12       0.0
# 
# ================================Branch Details================================
# 
# Branch Coverage for file ral_driver.sv --
# 
# ------------------------------------IF Branch------------------------------------
#     13                                   ***0***     Count coming in to IF
#     13              1                    ***0***         if (!uvm_config_db#(virtual ral_if)::get(this, "", "vif", vif))
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     14                                   ***0***     Count coming in to IF
#     14              1                    ***0***           `uvm_error("DRV", "Unable to access interface");
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     27                                   ***0***     Count coming in to IF
#     27              1                    ***0***         if(tr.PWRITE == 1'b1) begin
#     42              1                    ***0***        end else begin
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     37                                   ***0***     Count coming in to IF
#     37              1                    ***0***         `uvm_info("DRV", $sformatf("Data Write -> Wdata : %0h",vif.PWDATA),UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     51                                   ***0***     Count coming in to IF
#     51              1                    ***0***              `uvm_info("DRV", $sformatf("Data READ -> read data : %0h",vif.PRDATA),UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     57                                   ***0***     Count coming in to IF
#     57              1                    ***0***       `uvm_info("drv",$sformatf("-----------------------------------DRIVER DONE--------------------"), UVM_LOW);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# 
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      0         0         0     100.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File ral_driver.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
# 
# Total Node Count     =          0 
# Toggled Node Count   =          0 
# Untoggled Node Count =          0 
# 
# Toggle Coverage      =      100.0% (0 of 0 bins)
# 
# =================================================================================
# === File: ral_env.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                           16         0        16       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file ral_env.sv --
# 
#     1                                                class apb_env extends uvm_env;
#     2                                                  apb_agent agent_inst;
#     3                                                  apb_reg_block regmodel;
#     4                                                  apb_adapter adapter_inst;
#     5                                                  apb_scoreboard sc;
#     6                                                
#     7               1                    ***0***       `uvm_component_utils(apb_env)
#     7               2                    ***0***     
#     7               3                    ***0***     
#     8                                                
#     9                                                  function new(string name = "apb_env", uvm_component parent = null);
#     10              1                    ***0***         super.new(name, parent);
#     11                                                 endfunction : new
#     12                                               
#     13                                                 // build_phase - create the components
#     14                                                 function void build_phase(uvm_phase phase);
#     15              1                    ***0***         super.build_phase(phase);
#     16              1                    ***0***         agent_inst = apb_agent::type_id::create("agent_inst", this);
#     17              1                    ***0***         regmodel = apb_reg_block::type_id::create("regmodel", this);
#     18              1                    ***0***         adapter_inst = apb_adapter::type_id::create("adapter_inst", this);
#     19              1                    ***0***         sc = apb_scoreboard::type_id::create("sc", this);
#     20                                               
#     21              1                    ***0***         regmodel.configure(null, "");
#     22              1                    ***0***         regmodel.build();
#     23              1                    ***0***         regmodel.lock_model();
#     24                                                 endfunction
#     25                                               
#     26                                                 function void connect_phase(uvm_phase phase);
#     27              1                    ***0***         super.connect_phase(phase);
#     28              1                    ***0***         agent_inst.mon.mon_ap.connect(sc.mon_port);
#     29              1                    ***0***         regmodel.default_map.set_sequencer(.sequencer(agent_inst.seqr), .adapter(adapter_inst));
#     30              1                    ***0***         regmodel.default_map.set_base_addr(32'h0000_0000); // APB Base Address
#     31                                                
#     32                                                 endfunction
#     33                                               endclass
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                         0         0         0     100.0
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      0         0         0     100.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File ral_env.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
# 
# Total Node Count     =          0 
# Toggled Node Count   =          0 
# Untoggled Node Count =          0 
# 
# Toggle Coverage      =      100.0% (0 of 0 bins)
# 
# =================================================================================
# === File: ral_if.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                            0         0         0     100.0
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                         0         0         0     100.0
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                    202         0       202       0.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File ral_if.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
#           1                                PRESETn           0           0        0.00 
#           1                                   PCLK           0           0        0.00 
#           3                                   PSEL           0           0        0.00 
#           4                                PENABLE           0           0        0.00 
#           5                                 PWRITE           0           0        0.00 
#           6                               PADDR[9]           0           0        0.00 
#           6                               PADDR[8]           0           0        0.00 
#           6                               PADDR[7]           0           0        0.00 
#           6                               PADDR[6]           0           0        0.00 
#           6                               PADDR[5]           0           0        0.00 
#           6                               PADDR[4]           0           0        0.00 
#           6                               PADDR[3]           0           0        0.00 
#           6                              PADDR[31]           0           0        0.00 
#           6                              PADDR[30]           0           0        0.00 
#           6                               PADDR[2]           0           0        0.00 
#           6                              PADDR[29]           0           0        0.00 
#           6                              PADDR[28]           0           0        0.00 
#           6                              PADDR[27]           0           0        0.00 
#           6                              PADDR[26]           0           0        0.00 
#           6                              PADDR[25]           0           0        0.00 
#           6                              PADDR[24]           0           0        0.00 
#           6                              PADDR[23]           0           0        0.00 
#           6                              PADDR[22]           0           0        0.00 
#           6                              PADDR[21]           0           0        0.00 
#           6                              PADDR[20]           0           0        0.00 
#           6                               PADDR[1]           0           0        0.00 
#           6                              PADDR[19]           0           0        0.00 
#           6                              PADDR[18]           0           0        0.00 
#           6                              PADDR[17]           0           0        0.00 
#           6                              PADDR[16]           0           0        0.00 
#           6                              PADDR[15]           0           0        0.00 
#           6                              PADDR[14]           0           0        0.00 
#           6                              PADDR[13]           0           0        0.00 
#           6                              PADDR[12]           0           0        0.00 
#           6                              PADDR[11]           0           0        0.00 
#           6                              PADDR[10]           0           0        0.00 
#           6                               PADDR[0]           0           0        0.00 
#           7                              PWDATA[9]           0           0        0.00 
#           7                              PWDATA[8]           0           0        0.00 
#           7                              PWDATA[7]           0           0        0.00 
#           7                              PWDATA[6]           0           0        0.00 
#           7                              PWDATA[5]           0           0        0.00 
#           7                              PWDATA[4]           0           0        0.00 
#           7                              PWDATA[3]           0           0        0.00 
#           7                             PWDATA[31]           0           0        0.00 
#           7                             PWDATA[30]           0           0        0.00 
#           7                              PWDATA[2]           0           0        0.00 
#           7                             PWDATA[29]           0           0        0.00 
#           7                             PWDATA[28]           0           0        0.00 
#           7                             PWDATA[27]           0           0        0.00 
#           7                             PWDATA[26]           0           0        0.00 
#           7                             PWDATA[25]           0           0        0.00 
#           7                             PWDATA[24]           0           0        0.00 
#           7                             PWDATA[23]           0           0        0.00 
#           7                             PWDATA[22]           0           0        0.00 
#           7                             PWDATA[21]           0           0        0.00 
#           7                             PWDATA[20]           0           0        0.00 
#           7                              PWDATA[1]           0           0        0.00 
#           7                             PWDATA[19]           0           0        0.00 
#           7                             PWDATA[18]           0           0        0.00 
#           7                             PWDATA[17]           0           0        0.00 
#           7                             PWDATA[16]           0           0        0.00 
#           7                             PWDATA[15]           0           0        0.00 
#           7                             PWDATA[14]           0           0        0.00 
#           7                             PWDATA[13]           0           0        0.00 
#           7                             PWDATA[12]           0           0        0.00 
#           7                             PWDATA[11]           0           0        0.00 
#           7                             PWDATA[10]           0           0        0.00 
#           7                              PWDATA[0]           0           0        0.00 
#           8                              PRDATA[9]           0           0        0.00 
#           8                              PRDATA[8]           0           0        0.00 
#           8                              PRDATA[7]           0           0        0.00 
#           8                              PRDATA[6]           0           0        0.00 
#           8                              PRDATA[5]           0           0        0.00 
#           8                              PRDATA[4]           0           0        0.00 
#           8                              PRDATA[3]           0           0        0.00 
#           8                             PRDATA[31]           0           0        0.00 
#           8                             PRDATA[30]           0           0        0.00 
#           8                              PRDATA[2]           0           0        0.00 
#           8                             PRDATA[29]           0           0        0.00 
#           8                             PRDATA[28]           0           0        0.00 
#           8                             PRDATA[27]           0           0        0.00 
#           8                             PRDATA[26]           0           0        0.00 
#           8                             PRDATA[25]           0           0        0.00 
#           8                             PRDATA[24]           0           0        0.00 
#           8                             PRDATA[23]           0           0        0.00 
#           8                             PRDATA[22]           0           0        0.00 
#           8                             PRDATA[21]           0           0        0.00 
#           8                             PRDATA[20]           0           0        0.00 
#           8                              PRDATA[1]           0           0        0.00 
#           8                             PRDATA[19]           0           0        0.00 
#           8                             PRDATA[18]           0           0        0.00 
#           8                             PRDATA[17]           0           0        0.00 
#           8                             PRDATA[16]           0           0        0.00 
#           8                             PRDATA[15]           0           0        0.00 
#           8                             PRDATA[14]           0           0        0.00 
#           8                             PRDATA[13]           0           0        0.00 
#           8                             PRDATA[12]           0           0        0.00 
#           8                             PRDATA[11]           0           0        0.00 
#           8                             PRDATA[10]           0           0        0.00 
#           8                              PRDATA[0]           0           0        0.00 
# 
# Total Node Count     =        101 
# Toggled Node Count   =          0 
# Untoggled Node Count =        101 
# 
# Toggle Coverage      =        0.0% (0 of 202 bins)
# 
# =================================================================================
# === File: ral_monitor.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                           17         0        17       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file ral_monitor.sv --
# 
#     1                                                class apb_monitor extends uvm_monitor;
#     2               1                    ***0***       `uvm_component_utils(apb_monitor)
#     2               2                    ***0***     
#     2               3                    ***0***     
#     3                                                
#     4                                                  uvm_analysis_port #(apb_transaction) mon_ap;
#     5                                                  virtual ral_if vif;
#     6                                                  
#     7                                                  apb_transaction tr;
#     8                                                  
#     9                                                  function new(string name="apb_monitor", uvm_component parent);
#     10              1                    ***0***         super.new(name, parent);
#     11                                                 endfunction
#     12                                                   
#     13                                                 function void build_phase(uvm_phase phase);
#     14              1                    ***0***         mon_ap = new("mon_ap",this);
#     15                                                   if(!uvm_config_db#(virtual ral_if)::get(this,"","vif",vif))
#     16              1                    ***0***           `uvm_error("MON","Error getting interface handle")
#     17                                                 endfunction:build_phase
#     18                                               
#     19                                                 virtual task run_phase(uvm_phase phase);
#     20                                                   apb_transaction tr;
#     21              1                    ***0***         tr = apb_transaction::type_id::create("tr");
#     22                                               
#     23              1                    ***0***       forever begin
#     24              1                    ***0***           repeat(3) @(posedge vif.PCLK); // Sync with APB clock
#     24              2                    ***0***     
#     25              1                    ***0***           tr.PWRITE = vif.PWRITE;
#     26              1                    ***0***           tr.PADDR = vif.PADDR;
#     27              1                    ***0***           tr.PWDATA = vif.PWDATA;
#     28              1                    ***0***           tr.PRDATA = vif.PRDATA;
#     29                                                   
#     30              1                    ***0***         `uvm_info("MON", $sformatf("PWRITE :%b PADDR : %0d PWDATA:%0d PRDATA:%0d", tr.PWRITE, tr.PADDR, tr.PWDATA, tr.PRDATA), UVM_NONE);
#     31              1                    ***0***         mon_ap.write(tr);
#     32              1                    ***0***         `uvm_info("MON",$sformatf("---------------------------------MONITOR DONE--------------------------------------------"),UVM_LOW);
#     33                                                 end
#     34                                                endtask
#     35                                               endclass
#     36                                               
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                         8         0         8       0.0
# 
# ================================Branch Details================================
# 
# Branch Coverage for file ral_monitor.sv --
# 
# ------------------------------------IF Branch------------------------------------
#     15                                   ***0***     Count coming in to IF
#     15              1                    ***0***         if(!uvm_config_db#(virtual ral_if)::get(this,"","vif",vif))
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     16                                   ***0***     Count coming in to IF
#     16              1                    ***0***           `uvm_error("MON","Error getting interface handle")
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     30                                   ***0***     Count coming in to IF
#     30              1                    ***0***         `uvm_info("MON", $sformatf("PWRITE :%b PADDR : %0d PWDATA:%0d PRDATA:%0d", tr.PWRITE, tr.PADDR, tr.PWDATA, tr.PRDATA), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     32                                   ***0***     Count coming in to IF
#     32              1                    ***0***         `uvm_info("MON",$sformatf("---------------------------------MONITOR DONE--------------------------------------------"),UVM_LOW);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# 
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      0         0         0     100.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File ral_monitor.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
# 
# Total Node Count     =          0 
# Toggled Node Count   =          0 
# Untoggled Node Count =          0 
# 
# Toggle Coverage      =      100.0% (0 of 0 bins)
# 
# =================================================================================
# === File: ral_reg_block.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                          133         0       133       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file ral_reg_block.sv --
# 
#     1                                                class slv_ctrl extends uvm_reg;
#     2               1                    ***0***       `uvm_object_utils(slv_ctrl)
#     2               2                    ***0***     
#     2               3                    ***0***     
#     2               4                    ***0***     
#     2               5                    ***0***     
#     2               6                    ***0***     
#     2               7                    ***0***     
#     2               8                    ***0***     
#     2               9                    ***0***     
#     2              10                    ***0***     
#     3                                                  rand uvm_reg_field ctrl;
#     4                                                
#     5                                                  ///coverpoint
#     6                                                  covergroup ctrl_cov;
#     7                                                    option.per_instance = 1;
#     8                                                    coverpoint ctrl.value[3:0]{
#     9                                                      bins low = {[0:$]};}
#     10                                                endgroup
#     11                                               
#     12                                                 function new(string name="slv_ctrl");
#     13              1                    ***0***         super.new(name, 4, UVM_CVR_FIELD_VALS);
#     14                                                   if(has_coverage(UVM_CVR_FIELD_VALS))
#     15              1                    ***0***         ctrl_cov = new();
#     16                                                 endfunction
#     17                                               
#     18                                                 virtual function void sample(uvm_reg_data_t data,uvm_reg_data_t byte_en,bit is_read,uvm_reg_map map);
#     19              1                    ***0***         ctrl_cov.sample();
#     20                                                 endfunction
#     21                                                   
#     22                                                 virtual function void sample_values();
#     23              1                    ***0***         super.sample_values();
#     24              1                    ***0***         ctrl_cov.sample();
#     25                                                 endfunction
#     26                                               
#     27                                                 function void build();
#     28              1                    ***0***         ctrl= uvm_reg_field::type_id::create("ctrl");
#     29              1                    ***0***         ctrl.configure(this, 4, 0, "RW", 0, 0, 1, 1, 1);
#     30                                                
#     31                                                 endfunction
#     32                                               endclass
#     33                                               
#     34                                               class slv_reg1 extends uvm_reg;
#     35              1                    ***0***       `uvm_object_utils(slv_reg1)
#     35              2                    ***0***     
#     35              3                    ***0***     
#     35              4                    ***0***     
#     35              5                    ***0***     
#     35              6                    ***0***     
#     35              7                    ***0***     
#     35              8                    ***0***     
#     35              9                    ***0***     
#     35             10                    ***0***     
#     36                                                 rand uvm_reg_field reg1;
#     37                                               
#     38                                                  ////coverpoint
#     39                                                 covergroup r1_cov;
#     40                                                   option.per_instance = 1;
#     41                                                   coverpoint reg1.value[31:0] {
#     42                                                     bins mid = {[0:$]};}
#     43                                                 endgroup
#     44                                               
#     45                                                 function new(string name="slv_reg1");
#     46              1                    ***0***         super.new(name, 32, UVM_CVR_FIELD_VALS);
#     47                                                   if(has_coverage(UVM_CVR_FIELD_VALS))
#     48              1                    ***0***           r1_cov = new();
#     49                                                 endfunction
#     50                                                   
#     51                                                 virtual function void sample(uvm_reg_data_t data,uvm_reg_data_t byte_en,bit is_read,uvm_reg_map map);
#     52              1                    ***0***         r1_cov.sample();
#     53                                                 endfunction
#     54                                                   
#     55                                                 virtual function void sample_values();
#     56              1                    ***0***         super.sample_values();
#     57              1                    ***0***         r1_cov.sample();
#     58                                                 endfunction
#     59                                               
#     60                                                 function void build();
#     61              1                    ***0***         reg1 = uvm_reg_field::type_id::create("reg1");
#     62              1                    ***0***         reg1.configure(this, 32, 0, "RW", 0, 32'hA5A5_0000, 1, 1, 1);
#     63                                               
#     64                                                 endfunction
#     65                                               endclass
#     66                                               
#     67                                               class slv_reg2 extends uvm_reg;
#     68              1                    ***0***       `uvm_object_utils(slv_reg2)
#     68              2                    ***0***     
#     68              3                    ***0***     
#     68              4                    ***0***     
#     68              5                    ***0***     
#     68              6                    ***0***     
#     68              7                    ***0***     
#     68              8                    ***0***     
#     68              9                    ***0***     
#     68             10                    ***0***     
#     69                                                 rand uvm_reg_field reg2;
#     70                                                 
#     71                                                 ////coverpoint
#     72                                                 covergroup r2_cov;
#     73                                                   option.per_instance = 1;
#     74                                                   coverpoint reg2.value[31:0] {
#     75                                                     bins high = {[0:$]};}
#     76                                                 endgroup
#     77                                               
#     78                                                 function new(string name="reg2");
#     79              1                    ***0***         super.new(name, 32, UVM_CVR_FIELD_VALS);
#     80                                                   if(has_coverage(UVM_CVR_FIELD_VALS))
#     81              1                    ***0***           r2_cov = new();
#     82                                                 endfunction
#     83                                                   
#     84                                                 virtual function void sample(uvm_reg_data_t data,uvm_reg_data_t byte_en,bit is_read,uvm_reg_map map);
#     85              1                    ***0***         r2_cov.sample();
#     86                                                 endfunction
#     87                                                   
#     88                                                 virtual function void sample_values();
#     89              1                    ***0***         super.sample_values();
#     90              1                    ***0***         r2_cov.sample();
#     91                                                 endfunction
#     92                                               
#     93                                                 function void build();
#     94              1                    ***0***         reg2 = uvm_reg_field::type_id::create("reg2");
#     95              1                    ***0***         reg2.configure(this, 32, 0, "RW", 0,  32'h1234_9876, 1, 1, 1);
#     96                                                 endfunction
#     97                                               endclass
#     98                                               
#     99                                               class slv_reg3 extends uvm_reg;
#     100             1                    ***0***       `uvm_object_utils(slv_reg3)
#     100             2                    ***0***     
#     100             3                    ***0***     
#     100             4                    ***0***     
#     100             5                    ***0***     
#     100             6                    ***0***     
#     100             7                    ***0***     
#     100             8                    ***0***     
#     100             9                    ***0***     
#     100            10                    ***0***     
#     101                                                rand uvm_reg_field reg3;
#     102                                                
#     103                                                ////coverpoint
#     104                                                covergroup r3_cov;
#     105                                                  option.per_instance = 1;
#     106                                                  coverpoint reg3.value[31:0]{
#     107                                                    bins high = {[0:$]};}
#     108                                              endgroup
#     109                                                  
#     110                                                function new(string name="slv_reg3");
#     111             1                    ***0***         super.new(name, 32, UVM_CVR_FIELD_VALS);
#     112                                                  if(has_coverage(UVM_CVR_FIELD_VALS))
#     113             1                    ***0***           r3_cov = new();  
#     114                                                 endfunction
#     115                                                  
#     116                                                virtual function void sample(uvm_reg_data_t data,uvm_reg_data_t byte_en,bit is_read,uvm_reg_map map);
#     117             1                    ***0***         r3_cov.sample();
#     118                                                endfunction
#     119                                                  
#     120                                                virtual function void sample_values();
#     121             1                    ***0***         super.sample_values();
#     122             1                    ***0***         r3_cov.sample();
#     123                                                endfunction
#     124                                              
#     125                                                function void build();
#     126             1                    ***0***         reg3 = uvm_reg_field::type_id::create("reg3");
#     127             1                    ***0***         reg3.configure(this, 32, 0, "RW", 0,  32'h5A5A_5555, 1, 1, 1);
#     128                                                endfunction
#     129                                              endclass
#     130                                              
#     131                                              class slv_reg4 extends uvm_reg;
#     132             1                    ***0***       `uvm_object_utils(slv_reg4)
#     132             2                    ***0***     
#     132             3                    ***0***     
#     132             4                    ***0***     
#     132             5                    ***0***     
#     132             6                    ***0***     
#     132             7                    ***0***     
#     132             8                    ***0***     
#     132             9                    ***0***     
#     132            10                    ***0***     
#     133                                                rand uvm_reg_field reg4;
#     134                                              
#     135                                                 ////coverpoint
#     136                                                covergroup r4_cov;
#     137                                                  option.per_instance = 1;
#     138                                                  coverpoint reg4.value[31:0]{
#     139                                                    bins lower = {[0:$]};}
#     140                                              endgroup
#     141                                              
#     142                                                function new(string name="slv_reg4");
#     143             1                    ***0***         super.new(name, 32, UVM_CVR_FIELD_VALS);
#     144                                                  if(has_coverage(UVM_CVR_FIELD_VALS))
#     145             1                    ***0***           r4_cov = new();
#     146                                                endfunction
#     147                                              
#     148                                                virtual function void sample(uvm_reg_data_t data,uvm_reg_data_t byte_en,bit is_read,uvm_reg_map map);
#     149             1                    ***0***         r4_cov.sample();
#     150                                                endfunction
#     151                                                
#     152                                                function void build();
#     153             1                    ***0***         reg4 = uvm_reg_field::type_id::create("reg4");
#     154             1                    ***0***         reg4.configure(this, 32, 0, "RW", 0, 32'h0000_FFFF, 1, 1, 1);
#     155                                                endfunction
#     156                                              endclass
#     157                                              
#     158                                              class apb_reg_block extends uvm_reg_block;
#     159             1                    ***0***       `uvm_object_utils(apb_reg_block)
#     159             2                    ***0***     
#     159             3                    ***0***     
#     159             4                    ***0***     
#     159             5                    ***0***     
#     159             6                    ***0***     
#     159             7                    ***0***     
#     159             8                    ***0***     
#     159             9                    ***0***     
#     159            10                    ***0***     
#     160                                               
#     161                                              rand  slv_ctrl ctrl1;
#     162                                              rand  slv_reg1 r1;
#     163                                              rand  slv_reg2 r2;
#     164                                              rand  slv_reg3 r3;
#     165                                              rand  slv_reg4 r4;  
#     166                                                
#     167                                              function new(string name="top_reg_block");
#     168             1                    ***0***         super.new(name, UVM_NO_COVERAGE);
#     169                                                endfunction
#     170                                              
#     171                                                function void build();
#     172             1                    ***0***         uvm_reg::include_coverage("*", UVM_CVR_FIELD_VALS);
#     173             1                    ***0***         ctrl1 = slv_ctrl::type_id::create("ctrl1");
#     174             1                    ***0***         ctrl1.build();
#     175             1                    ***0***         ctrl1.configure(this);
#     176             1                    ***0***         void'(ctrl1.set_coverage(UVM_CVR_FIELD_VALS));
#     177             1                    ***0***         ctrl1.add_hdl_path_slice("ctrl1",0, 4); 
#     178                                              
#     179             1                    ***0***         uvm_reg::include_coverage("*", UVM_CVR_FIELD_VALS);
#     180             1                    ***0***         r1 = slv_reg1::type_id::create("r1");
#     181             1                    ***0***         r1.build();
#     182             1                    ***0***         r1.configure(this);
#     183             1                    ***0***         void'(r1.set_coverage(UVM_CVR_FIELD_VALS));
#     184             1                    ***0***         r1.add_hdl_path_slice("reg1",0, 32); 
#     185                                              
#     186             1                    ***0***         uvm_reg::include_coverage("*", UVM_CVR_ALL);
#     187             1                    ***0***         r2 = slv_reg2::type_id::create("r2");
#     188             1                    ***0***         r2.build();
#     189             1                    ***0***         r2.configure(this);
#     190             1                    ***0***         void'(r2.set_coverage(UVM_CVR_FIELD_VALS));
#     191             1                    ***0***         r2.add_hdl_path_slice("reg2",0, 32); 
#     192                                                  
#     193             1                    ***0***         uvm_reg::include_coverage("*", UVM_CVR_ALL);
#     194             1                    ***0***         r3 = slv_reg3::type_id::create("r3");
#     195             1                    ***0***         r3.build();
#     196             1                    ***0***         r3.configure(this);
#     197             1                    ***0***         void'(r3.set_coverage(UVM_CVR_FIELD_VALS));
#     198             1                    ***0***         r3.add_hdl_path_slice("reg3",0, 32); 
#     199                                                  
#     200             1                    ***0***         uvm_reg::include_coverage("*", UVM_CVR_ALL);
#     201             1                    ***0***         r4 = slv_reg4::type_id::create("r4");
#     202             1                    ***0***         r4.build();
#     203             1                    ***0***         r4.configure(this);
#     204             1                    ***0***         void'(r4.set_coverage(UVM_CVR_FIELD_VALS));
#     205             1                    ***0***         r4.add_hdl_path_slice("reg4",0, 32); 
#     206                                                  
#     207             1                    ***0***         default_map = create_map("default_map", 0, 4, UVM_LITTLE_ENDIAN, 0);
#     208             1                    ***0***         default_map.add_reg(ctrl1, 'h0, "RW");
#     209             1                    ***0***         default_map.add_reg(r1, 'h4, "RW");
#     210             1                    ***0***         default_map.add_reg(r2, 'h8, "RW");
#     211             1                    ***0***         default_map.add_reg(r3, 'hc, "RW");
#     212             1                    ***0***         default_map.add_reg(r4, 'h10, "RW");    
#     213                                              
#     214             1                    ***0***         default_map.set_auto_predict(1);
#     215             1                    ***0***         add_hdl_path("tb.dut", "RTL"); 
#     216                                              
#     217             1                    ***0***         lock_model();
#     218                                                endfunction
#     219                                              endclass
#     220                                              
#     221                                              module tb;
#     222                                                top_reg_block t1;
#     223                                                initial begin
#     224                                                  t1 = new("top_reg_block");
#     225                                                  t1.build();
#     226                                                end
#     227                                              endmodule
#     228                                              
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                        70         0        70       0.0
# 
# ================================Branch Details================================
# 
# Branch Coverage for file ral_reg_block.sv --
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               1                    ***0***       `uvm_object_utils(slv_ctrl)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               2                    ***0***       `uvm_object_utils(slv_ctrl)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               3                    ***0***       `uvm_object_utils(slv_ctrl)
#     2               4                    ***0***       `uvm_object_utils(slv_ctrl)
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               5                    ***0***       `uvm_object_utils(slv_ctrl)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               6                    ***0***       `uvm_object_utils(slv_ctrl)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     14                                   ***0***     Count coming in to IF
#     14              1                    ***0***         if(has_coverage(UVM_CVR_FIELD_VALS))
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     35                                   ***0***     Count coming in to IF
#     35              1                    ***0***       `uvm_object_utils(slv_reg1)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     35                                   ***0***     Count coming in to IF
#     35              2                    ***0***       `uvm_object_utils(slv_reg1)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     35                                   ***0***     Count coming in to IF
#     35              3                    ***0***       `uvm_object_utils(slv_reg1)
#     35              4                    ***0***       `uvm_object_utils(slv_reg1)
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     35                                   ***0***     Count coming in to IF
#     35              5                    ***0***       `uvm_object_utils(slv_reg1)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     35                                   ***0***     Count coming in to IF
#     35              6                    ***0***       `uvm_object_utils(slv_reg1)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     47                                   ***0***     Count coming in to IF
#     47              1                    ***0***         if(has_coverage(UVM_CVR_FIELD_VALS))
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     68                                   ***0***     Count coming in to IF
#     68              1                    ***0***       `uvm_object_utils(slv_reg2)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     68                                   ***0***     Count coming in to IF
#     68              2                    ***0***       `uvm_object_utils(slv_reg2)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     68                                   ***0***     Count coming in to IF
#     68              3                    ***0***       `uvm_object_utils(slv_reg2)
#     68              4                    ***0***       `uvm_object_utils(slv_reg2)
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     68                                   ***0***     Count coming in to IF
#     68              5                    ***0***       `uvm_object_utils(slv_reg2)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     68                                   ***0***     Count coming in to IF
#     68              6                    ***0***       `uvm_object_utils(slv_reg2)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     80                                   ***0***     Count coming in to IF
#     80              1                    ***0***         if(has_coverage(UVM_CVR_FIELD_VALS))
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     100                                  ***0***     Count coming in to IF
#     100             1                    ***0***       `uvm_object_utils(slv_reg3)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     100                                  ***0***     Count coming in to IF
#     100             2                    ***0***       `uvm_object_utils(slv_reg3)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     100                                  ***0***     Count coming in to IF
#     100             3                    ***0***       `uvm_object_utils(slv_reg3)
#     100             4                    ***0***       `uvm_object_utils(slv_reg3)
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     100                                  ***0***     Count coming in to IF
#     100             5                    ***0***       `uvm_object_utils(slv_reg3)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     100                                  ***0***     Count coming in to IF
#     100             6                    ***0***       `uvm_object_utils(slv_reg3)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     112                                  ***0***     Count coming in to IF
#     112             1                    ***0***         if(has_coverage(UVM_CVR_FIELD_VALS))
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     132                                  ***0***     Count coming in to IF
#     132             1                    ***0***       `uvm_object_utils(slv_reg4)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     132                                  ***0***     Count coming in to IF
#     132             2                    ***0***       `uvm_object_utils(slv_reg4)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     132                                  ***0***     Count coming in to IF
#     132             3                    ***0***       `uvm_object_utils(slv_reg4)
#     132             4                    ***0***       `uvm_object_utils(slv_reg4)
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     132                                  ***0***     Count coming in to IF
#     132             5                    ***0***       `uvm_object_utils(slv_reg4)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     132                                  ***0***     Count coming in to IF
#     132             6                    ***0***       `uvm_object_utils(slv_reg4)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     144                                  ***0***     Count coming in to IF
#     144             1                    ***0***         if(has_coverage(UVM_CVR_FIELD_VALS))
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     159                                  ***0***     Count coming in to IF
#     159             1                    ***0***       `uvm_object_utils(apb_reg_block)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     159                                  ***0***     Count coming in to IF
#     159             2                    ***0***       `uvm_object_utils(apb_reg_block)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     159                                  ***0***     Count coming in to IF
#     159             3                    ***0***       `uvm_object_utils(apb_reg_block)
#     159             4                    ***0***       `uvm_object_utils(apb_reg_block)
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     159                                  ***0***     Count coming in to IF
#     159             5                    ***0***       `uvm_object_utils(apb_reg_block)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     159                                  ***0***     Count coming in to IF
#     159             6                    ***0***       `uvm_object_utils(apb_reg_block)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# 
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      0         0         0     100.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File ral_reg_block.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
# 
# Total Node Count     =          0 
# Toggled Node Count   =          0 
# Untoggled Node Count =          0 
# 
# Toggle Coverage      =      100.0% (0 of 0 bins)
# 
# =================================================================================
# === File: ral_scoreboard.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                           15         0        15       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file ral_scoreboard.sv --
# 
#     1                                                //`uvm_analysis_imp_decl(_active)
#     2                                                //`uvm_analysis_imp_decl(_passive)
#     3                                                
#     4                                                class apb_scoreboard extends uvm_scoreboard;
#     5               1                    ***0***       `uvm_component_utils(apb_scoreboard)
#     5               2                    ***0***     
#     5               3                    ***0***     
#     6                                                
#     7                                                //  uvm_analysis_imp_active#(apb_transaction, apb_scoreboard) drv_port;
#     8                                                  uvm_analysis_imp#(apb_transaction, apb_scoreboard) mon_port;
#     9                                                
#     10                                                 apb_transaction req;
#     11                                               
#     12                                                 bit [31:0] expected_mem [16];
#     13                                               //  bit [31:0] actual_mem [16];
#     14                                               
#     15                                                 apb_transaction pkt_queue[$];
#     16                                               
#     17                                                 function new(string name = "apb_scoreboard", uvm_component parent = null);
#     18              1                    ***0***         super.new(name, parent);
#     19                                                 //  drv_port = new("drv_port", this);
#     20              1                    ***0***         mon_port = new("mon_port", this);
#     21                                                 endfunction
#     22                                               
#     23                                                 virtual function void build_phase(uvm_phase phase);
#     24              1                    ***0***         super.build_phase(phase);
#     25                                                 endfunction
#     26                                                 
#     27                                                 virtual function void write(apb_transaction tr);
#     28              1                    ***0***         pkt_queue.push_back(tr);
#     29                                                 endfunction
#     30                                               
#     31                                               virtual task run_phase(uvm_phase phase);
#     32                                                 apb_transaction pkt;
#     33                                                 
#     34              1                    ***0***       forever begin
#     35              1                    ***0***         wait(pkt_queue.size() > 0);
#     36              1                    ***0***         pkt = pkt_queue.pop_front();
#     37                                                   
#     38                                                   if (pkt.PWRITE) begin
#     39              1                    ***0***           expected_mem[pkt.PADDR] = pkt.PWDATA;
#     40              1                    ***0***           `uvm_info("SCOREBOARD--------WRITE", $sformatf("WRITE: Addr = %0h, Data = %0d", pkt.PADDR, pkt.PWDATA), UVM_MEDIUM);
#     41                                                   end else begin
#     42                                                     if (expected_mem[pkt.PADDR] !== pkt.PRDATA) begin
#     43              1                    ***0***             `uvm_error("SCOREBOARD----------MISMATCH", $sformatf("Mismatch at Addr = %0h, Expected = %0h, Received = %0h", pkt.PADDR, expected_mem[pkt.PADDR], pkt.PRDATA));
#     44                                                     end else begin
#     45              1                    ***0***             `uvm_info("SCOREBOARD---------MATCH", $sformatf("READ MATCH: Addr = %0h, Data = %0h", pkt.PADDR, pkt.PRDATA), UVM_MEDIUM);
#     46                                                     end
#     47                                                    end
#     48              1                    ***0***             `uvm_info("SCOREBOARD", $sformatf("---------------------------------------SCOREBOARD DONE--------------------------------------"),UVM_LOW);
#     49                                                    end
#     50                                                 endtask
#     51                                               endclass
#     52                                               
#     53                                               
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                        12         0        12       0.0
# 
# ================================Branch Details================================
# 
# Branch Coverage for file ral_scoreboard.sv --
# 
# ------------------------------------IF Branch------------------------------------
#     38                                   ***0***     Count coming in to IF
#     38              1                    ***0***         if (pkt.PWRITE) begin
#     41              1                    ***0***         end else begin
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     40                                   ***0***     Count coming in to IF
#     40              1                    ***0***           `uvm_info("SCOREBOARD--------WRITE", $sformatf("WRITE: Addr = %0h, Data = %0d", pkt.PADDR, pkt.PWDATA), UVM_MEDIUM);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     42                                   ***0***     Count coming in to IF
#     42              1                    ***0***           if (expected_mem[pkt.PADDR] !== pkt.PRDATA) begin
#     44              1                    ***0***           end else begin
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     43                                   ***0***     Count coming in to IF
#     43              1                    ***0***             `uvm_error("SCOREBOARD----------MISMATCH", $sformatf("Mismatch at Addr = %0h, Expected = %0h, Received = %0h", pkt.PADDR, expected_mem[pkt.PADDR], pkt.PRDATA));
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     45                                   ***0***     Count coming in to IF
#     45              1                    ***0***             `uvm_info("SCOREBOARD---------MATCH", $sformatf("READ MATCH: Addr = %0h, Data = %0h", pkt.PADDR, pkt.PRDATA), UVM_MEDIUM);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     48                                   ***0***     Count coming in to IF
#     48              1                    ***0***             `uvm_info("SCOREBOARD", $sformatf("---------------------------------------SCOREBOARD DONE--------------------------------------"),UVM_LOW);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# 
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      0         0         0     100.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File ral_scoreboard.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
# 
# Total Node Count     =          0 
# Toggled Node Count   =          0 
# Untoggled Node Count =          0 
# 
# Toggle Coverage      =      100.0% (0 of 0 bins)
# 
# =================================================================================
# === File: ral_sequence.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                          205         0       205       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file ral_sequence.sv --
# 
#     1                                                class frontdoor_reg_seq extends uvm_sequence;
#     2               1                    ***0***       `uvm_object_utils(frontdoor_reg_seq)
#     2               2                    ***0***     
#     2               3                    ***0***     
#     2               4                    ***0***     
#     2               5                    ***0***     
#     2               6                    ***0***     
#     2               7                    ***0***     
#     2               8                    ***0***     
#     2               9                    ***0***     
#     2              10                    ***0***     
#     3                                                
#     4                                                  apb_reg_block regmodel;
#     5                                                
#     6                                                  function new(string name = "apb_reg_seq");
#     7               1                    ***0***         super.new(name);
#     8                                                  endfunction
#     9                                                
#     10                                                 task body;
#     11                                                   uvm_status_e status;
#     12                                                   bit [31:0] rdata, rdata_m, dout_t;
#     13              1                    ***0***         $display("------------------------------------------------------------ctrl1--------------------------------------------------");
#     14              1                    ***0***         rdata = regmodel.ctrl1.get();
#     15              1                    ***0***         rdata_m = regmodel.ctrl1.get_mirrored_value();
#     16              1                    ***0***         `uvm_info("SEQ", $sformatf("ctrl1 Initial Value -> Desired Value : %0d and Mirrored Value : %0d", rdata, rdata_m),UVM_NONE);
#     17                                                   
#     18              1                    ***0***         regmodel.ctrl1.set(5'hf); 
#     19              1                    ***0***         rdata = regmodel.ctrl1.get();
#     20              1                    ***0***         rdata_m = regmodel.ctrl1.get_mirrored_value();
#     21                                                
#     22              1                    ***0***         `uvm_info("SEQ", $sformatf("ctrl1 After update -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m, dout_t), UVM_NONE);
#     23                                               
#     24              1                    ***0***         regmodel.ctrl1.write(status,5'hf);
#     25              1                    ***0***         rdata   = regmodel.ctrl1.get();
#     26              1                    ***0***         rdata_m = regmodel.ctrl1.get_mirrored_value();
#     27                                               
#     28              1                    ***0***         `uvm_info("SEQ", $sformatf("ctrl1 After write -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m,dout_t), UVM_NONE);
#     29              1                    ***0***         regmodel.ctrl1.read(status,dout_t);
#     30              1                    ***0***         rdata   = regmodel.ctrl1.get();
#     31              1                    ***0***         rdata_m = regmodel.ctrl1.get_mirrored_value();
#     32              1                    ***0***         `uvm_info("SEQ", $sformatf("ctrl1 After read  -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m,dout_t), UVM_NONE);
#     33                                               
#     34              1                    ***0***         $display("------------------------------------------------------------R1--------------------------------------------------");
#     35              1                    ***0***         rdata = regmodel.r1.get();
#     36              1                    ***0***         rdata_m = regmodel.r1.get_mirrored_value();
#     37              1                    ***0***         `uvm_info("SEQ", $sformatf("Reg1 Initial Value -> Desired Value : %0d and Mirrored Value : %0d", rdata, rdata_m),UVM_NONE);
#     38                                                   
#     39              1                    ***0***         regmodel.r1.set(32'hffffffff); 
#     40              1                    ***0***         rdata = regmodel.r1.get();
#     41              1                    ***0***         rdata_m = regmodel.r1.get_mirrored_value();
#     42                                                
#     43              1                    ***0***         `uvm_info("SEQ", $sformatf("Reg1 After update -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m, dout_t), UVM_NONE);
#     44                                               
#     45              1                    ***0***         regmodel.r1.write(status,32'hffffffff);
#     46              1                    ***0***         rdata   = regmodel.r1.get();
#     47              1                    ***0***         rdata_m = regmodel.r1.get_mirrored_value();
#     48                                               
#     49              1                    ***0***         `uvm_info("SEQ", $sformatf("Reg1 After write -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m,dout_t), UVM_NONE);
#     50              1                    ***0***         regmodel.r1.read(status,dout_t);
#     51              1                    ***0***         rdata   = regmodel.r1.get();
#     52              1                    ***0***         rdata_m = regmodel.r1.get_mirrored_value();
#     53              1                    ***0***         `uvm_info("SEQ", $sformatf("Reg1 After read  -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m,dout_t), UVM_NONE);
#     54                                               
#     55              1                    ***0***         $display("------------------------------------------------------------R2--------------------------------------------------");
#     56                                                
#     57              1                    ***0***         rdata = regmodel.r2.get();
#     58              1                    ***0***         rdata_m = regmodel.r2.get_mirrored_value();
#     59                                                   `uvm_info("SEQ", $sformatf("Reg2 Initial Value -> Desired Value : %0d and Mirrored Value : %0d", rdata, rdata_m), 
#     60              1                    ***0***     UVM_NONE);
#     61                                                   
#     62              1                    ***0***         regmodel.r2.set(32'hAAAAAAAA); 
#     63              1                    ***0***         rdata = regmodel.r2.get();
#     64              1                    ***0***         rdata_m = regmodel.r2.get_mirrored_value();
#     65                                                
#     66              1                    ***0***         `uvm_info("SEQ", $sformatf("Reg2 After update -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m, dout_t), UVM_NONE);
#     67                                               
#     68              1                    ***0***         regmodel.r2.write(status,32'hAAAAAAAA);
#     69              1                    ***0***         rdata   = regmodel.r2.get();
#     70              1                    ***0***         rdata_m = regmodel.r2.get_mirrored_value();
#     71                                               
#     72              1                    ***0***         `uvm_info("SEQ", $sformatf("Reg2 After write -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m,dout_t), UVM_NONE);
#     73              1                    ***0***         regmodel.r2.read(status,dout_t);
#     74              1                    ***0***         rdata   = regmodel.r2.get();
#     75              1                    ***0***         rdata_m = regmodel.r2.get_mirrored_value();
#     76              1                    ***0***         `uvm_info("SEQ", $sformatf("Reg2 After read  -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m,dout_t), UVM_NONE);
#     77                                               
#     78              1                    ***0***         $display("------------------------------------------------------------R3-------------------------------------------------");
#     79              1                    ***0***         rdata = regmodel.r3.get();
#     80              1                    ***0***         rdata_m = regmodel.r3.get_mirrored_value();
#     81              1                    ***0***         `uvm_info("SEQ", $sformatf("Reg3 Initial Value -> Desired Value : %0d and Mirrored Value : %0d", rdata, rdata_m),UVM_NONE);
#     82                                                   
#     83              1                    ***0***         regmodel.r3.set(32'hffffffff); 
#     84              1                    ***0***         rdata = regmodel.r3.get();
#     85              1                    ***0***         rdata_m = regmodel.r3.get_mirrored_value();
#     86                                                
#     87              1                    ***0***         `uvm_info("SEQ", $sformatf("Reg3 After update -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m, dout_t), UVM_NONE);
#     88                                               
#     89              1                    ***0***         regmodel.r3.write(status,32'hffffffff);
#     90              1                    ***0***         rdata   = regmodel.r3.get();
#     91              1                    ***0***         rdata_m = regmodel.r3.get_mirrored_value();
#     92                                               
#     93              1                    ***0***         `uvm_info("SEQ", $sformatf("Reg3 After write -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m,dout_t), UVM_NONE);
#     94              1                    ***0***         regmodel.r3.read(status,dout_t);
#     95              1                    ***0***         rdata   = regmodel.r3.get();
#     96              1                    ***0***         rdata_m = regmodel.r3.get_mirrored_value();
#     97              1                    ***0***         `uvm_info("SEQ", $sformatf("Reg3 After read  -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m,dout_t), UVM_NONE);
#     98                                               
#     99                                                  
#     100             1                    ***0***         $display("-------------------------------------------------------------R4--------------------------------------------------");
#     101             1                    ***0***         rdata = regmodel.r4.get();
#     102             1                    ***0***         rdata_m = regmodel.r4.get_mirrored_value();
#     103             1                    ***0***         `uvm_info("SEQ", $sformatf("Reg4 Initial Value -> Desired Value : %0d and Mirrored Value : %0d", rdata, rdata_m),UVM_NONE);
#     104                                                  
#     105             1                    ***0***         regmodel.r4.set(32'h3C3C3C3C); 
#     106             1                    ***0***         rdata = regmodel.r4.get();
#     107             1                    ***0***         rdata_m = regmodel.r4.get_mirrored_value();
#     108                                               
#     109             1                    ***0***         `uvm_info("SEQ", $sformatf("Reg4 After update -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m, dout_t), UVM_NONE);
#     110                                              
#     111             1                    ***0***         regmodel.r4.write(status,32'h3C3C3C3C);
#     112             1                    ***0***         rdata   = regmodel.r4.get();
#     113             1                    ***0***         rdata_m = regmodel.r4.get_mirrored_value();
#     114                                              
#     115             1                    ***0***         `uvm_info("SEQ", $sformatf("Reg4 After write -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m,dout_t), UVM_NONE);
#     116             1                    ***0***         regmodel.r4.read(status,dout_t);
#     117             1                    ***0***         rdata   = regmodel.r4.get();
#     118             1                    ***0***         rdata_m = regmodel.r4.get_mirrored_value();
#     119             1                    ***0***         `uvm_info("SEQ", $sformatf("Reg4 After read  -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m,dout_t), UVM_NONE);
#     120                                              
#     121                                              endtask
#     122                                              endclass
#     123                                              
#     124                                              ////////////////////////////////////////////////////////////////////////RESET VALUE/////////////////////////////////////////////////////////////////////////////
#     125                                              class top_reg_seq extends uvm_sequence;
#     126             1                    ***0***       `uvm_object_utils(top_reg_seq)
#     126             2                    ***0***     
#     126             3                    ***0***     
#     126             4                    ***0***     
#     126             5                    ***0***     
#     126             6                    ***0***     
#     126             7                    ***0***     
#     126             8                    ***0***     
#     126             9                    ***0***     
#     126            10                    ***0***     
#     127                                                apb_reg_block regmodel;
#     128                                                
#     129                                                function new (string name = "top_reg_seq"); 
#     130             1                    ***0***         super.new(name);
#     131                                                endfunction
#     132                                                  
#     133                                                task body;
#     134                                                  uvm_status_e status;
#     135                                                  bit [31:0] rdata,rdata_m;
#     136                                                  bit [31:0] rst_reg;
#     137                                                  bit rst_status;
#     138                                                  
#     139                                                  //////Check if R1 register has reset value
#     140             1                    ***0***         $display("-------------------------------------------------------------R1--------------------------------------------------");
#     141             1                    ***0***         rst_status = regmodel.r1.has_reset();
#     142             1                    ***0***         `uvm_info("SEQ", $sformatf("R1 Reset Value added : %0h ", rst_status), UVM_NONE);
#     143                                                  
#     144                                                  //////accessing default reset value of R1
#     145             1                    ***0***         rst_reg = regmodel.r1.get_reset();
#     146             1                    ***0***         `uvm_info("SEQ", $sformatf("R1 Register Reset Value : %0h ", rst_reg), UVM_NONE);
#     147                                                  
#     148                                                  ////////////////accessing mir and des before rst of R1
#     149             1                    ***0***         rdata = regmodel.r1.get();
#     150             1                    ***0***         rdata_m = regmodel.r1.get_mirrored_value();
#     151             1                    ***0***         `uvm_info("SEQ", $sformatf("R1 Before Reset -> Mir : %0h Des : %0h ", rdata_m, rdata), UVM_NONE);
#     152                                                  
#     153                                                  ///////////////mir and des value after rst of R1
#     154             1                    ***0***         $display("--------------Applying Reset to register model R1 ---------------");
#     155             1                    ***0***         regmodel.r1.reset();
#     156             1                    ***0***         rdata = regmodel.r1.get();
#     157             1                    ***0***         rdata_m = regmodel.r1.get_mirrored_value();
#     158             1                    ***0***         `uvm_info("SEQ", $sformatf("R1 After Reset -> Mir : %0h Des : %0h ", rdata_m, rdata), UVM_NONE);
#     159                                              
#     160                                                   //////Check if R2 register has reset value
#     161             1                    ***0***         $display("-------------------------------------------------------------R2--------------------------------------------------");
#     162             1                    ***0***         rst_status = regmodel.r2.has_reset();
#     163             1                    ***0***         `uvm_info("SEQ", $sformatf("R2 Reset Value added : %0h ", rst_status), UVM_NONE);
#     164                                                  
#     165                                                  //////accessing default reset value of R2
#     166             1                    ***0***         rst_reg = regmodel.r2.get_reset();
#     167             1                    ***0***         `uvm_info("SEQ", $sformatf("R2 Register Reset Value : %0h ", rst_reg), UVM_NONE);
#     168                                                  
#     169                                                  ////////////////accessing mir and des before rst of R2
#     170             1                    ***0***         rdata = regmodel.r2.get();
#     171             1                    ***0***         rdata_m = regmodel.r2.get_mirrored_value();
#     172             1                    ***0***         `uvm_info("SEQ", $sformatf("R2 Before Reset -> Mir : %0h Des : %0h ", rdata_m, rdata), UVM_NONE);
#     173                                                  
#     174                                                  ///////////////mir and des value after rst of R2
#     175             1                    ***0***         $display("--------------Applying Reset to register model R2---------------");
#     176             1                    ***0***         regmodel.r2.reset();
#     177             1                    ***0***         rdata = regmodel.r2.get();
#     178             1                    ***0***         rdata_m = regmodel.r2.get_mirrored_value();
#     179             1                    ***0***         `uvm_info("SEQ", $sformatf("R2 After Reset -> Mir : %0h Des : %0h ", rdata_m, rdata), UVM_NONE);
#     180                                              
#     181                                                   //////Check if R3 register has reset value
#     182             1                    ***0***         $display("-------------------------------------------------------------R3--------------------------------------------------");
#     183             1                    ***0***         rst_status = regmodel.r3.has_reset();
#     184             1                    ***0***         `uvm_info("SEQ", $sformatf("R3 Reset Value added : %0h ", rst_status), UVM_NONE);
#     185                                                  
#     186                                                  //////accessing default reset value of R3
#     187             1                    ***0***         rst_reg = regmodel.r3.get_reset();
#     188             1                    ***0***         `uvm_info("SEQ", $sformatf("R3 Register Reset Value : %0h ", rst_reg), UVM_NONE);
#     189                                                  
#     190                                                  ////////////////accessing mir and des before rst of R2
#     191             1                    ***0***         rdata = regmodel.r3.get();
#     192             1                    ***0***         rdata_m = regmodel.r3.get_mirrored_value();
#     193             1                    ***0***         `uvm_info("SEQ", $sformatf("R3 Before Reset -> Mir : %0h Des : %0h ", rdata_m, rdata), UVM_NONE);
#     194                                                  
#     195                                                  ///////////////mir and des value after rst of R3
#     196             1                    ***0***         $display("--------------Applying Reset to register model R3---------------");
#     197             1                    ***0***         regmodel.r3.reset();
#     198             1                    ***0***         rdata = regmodel.r3.get();
#     199             1                    ***0***         rdata_m = regmodel.r3.get_mirrored_value();
#     200             1                    ***0***         `uvm_info("SEQ", $sformatf("R3 After Reset -> Mir : %0h Des : %0h ", rdata_m, rdata), UVM_NONE);
#     201                                              
#     202                                                     //////Check if R4 register has reset value
#     203             1                    ***0***         $display("-------------------------------------------------------------R4--------------------------------------------------");
#     204             1                    ***0***         rst_status = regmodel.r4.has_reset();
#     205             1                    ***0***         `uvm_info("SEQ", $sformatf("R4 Reset Value added : %0h ", rst_status), UVM_NONE);
#     206                                                  
#     207                                                  //////accessing default reset value of R4
#     208             1                    ***0***         rst_reg = regmodel.r4.get_reset();
#     209             1                    ***0***         `uvm_info("SEQ", $sformatf("R4 Register Reset Value : %0h ", rst_reg), UVM_NONE);
#     210                                                  
#     211                                                  ////////////////accessing mir and des before rst of R4
#     212             1                    ***0***         rdata = regmodel.r4.get();
#     213             1                    ***0***         rdata_m = regmodel.r4.get_mirrored_value();
#     214             1                    ***0***         `uvm_info("SEQ", $sformatf("R4 Before Reset -> Mir : %0h Des : %0h ", rdata_m, rdata), UVM_NONE);
#     215                                                  
#     216                                                  ///////////////mir and des value after rst of R4
#     217             1                    ***0***         $display("--------------Applying Reset to register model R4---------------");
#     218             1                    ***0***         regmodel.r4.reset();
#     219             1                    ***0***         rdata = regmodel.r4.get();
#     220             1                    ***0***         rdata_m = regmodel.r4.get_mirrored_value();
#     221             1                    ***0***         `uvm_info("SEQ", $sformatf("R4 After Reset -> Mir : %0h Des : %0h ", rdata_m, rdata), UVM_NONE);
#     222                                                endtask
#     223                                              endclass
#     224                                              
#     225                                              ///////////////////////////////////////////////////////////////////////////BACKDOOR ACCESS//////////////////////////////////////////////////////////////////////
#     226                                              class backdoor_reg_seq extends uvm_sequence;
#     227             1                    ***0***     `uvm_object_utils(backdoor_reg_seq)
#     227             2                    ***0***     
#     227             3                    ***0***     
#     227             4                    ***0***     
#     227             5                    ***0***     
#     227             6                    ***0***     
#     227             7                    ***0***     
#     227             8                    ***0***     
#     227             9                    ***0***     
#     227            10                    ***0***     
#     228                                              apb_reg_block regmodel;
#     229                                              uvm_reg_data_t read_data;
#     230                                                
#     231                                                function new (string name = "backdoor_reg_seq"); 
#     232             1                    ***0***         super.new(name);
#     233                                                endfunction
#     234                                                  
#     235                                                task body;
#     236                                                  uvm_status_e status;
#     237                                                  bit [31:0] rdata;
#     238                                                  bit [31:0] des, mir;
#     239                                                  
#     240             1                    ***0***         $display("-------------------------------------------------------------R1--------------------------------------------------");
#     241             1                    ***0***         regmodel.r1.poke(status, 8'h55);
#     242             1                    ***0***         des = regmodel.r1.get();
#     243             1                    ***0***         mir = regmodel.r1.get_mirrored_value();
#     244             1                    ***0***         `uvm_info("SEQ", $sformatf("R1 Write -> Des: %0d Mir: %0d", des, mir), UVM_NONE);
#     245                                                  
#     246             1                    ***0***         regmodel.r1.peek(status, rdata);
#     247             1                    ***0***         `uvm_info(get_type_name(),$sformatf("R1 READ : %0d",rdata),UVM_LOW);
#     248             1                    ***0***         des = regmodel.r1.get();
#     249             1                    ***0***         mir = regmodel.r1.get_mirrored_value();
#     250             1                    ***0***         `uvm_info("SEQ", $sformatf("R1 Des: %0d Mir: %0d", des, mir), UVM_NONE);
#     251                                                  
#     252             1                    ***0***         $display("---------------------------------------------------------R2-------------------------------------------------------");
#     253             1                    ***0***         regmodel.r2.poke(status, 8'hAA);
#     254             1                    ***0***         des = regmodel.r2.get();
#     255             1                    ***0***         mir = regmodel.r2.get_mirrored_value();
#     256             1                    ***0***         `uvm_info("SEQ", $sformatf("R2 Write -> Des: %0d Mir: %0d", des, mir), UVM_NONE);
#     257                                                  
#     258             1                    ***0***         regmodel.r2.peek(status, rdata);
#     259             1                    ***0***         `uvm_info(get_type_name(),$sformatf("R2 READ : %0d",rdata),UVM_LOW);
#     260             1                    ***0***         des = regmodel.r2.get();
#     261             1                    ***0***         mir = regmodel.r2.get_mirrored_value();
#     262             1                    ***0***         `uvm_info("SEQ", $sformatf("R2 Des: %0d Mir: %0d", des, mir), UVM_NONE);
#     263                                                  
#     264             1                    ***0***         $display("---------------------------------------------------------R3-------------------------------------------------------");
#     265             1                    ***0***         regmodel.r3.poke(status, 8'hFF);
#     266             1                    ***0***         des = regmodel.r3.get();
#     267             1                    ***0***         mir = regmodel.r3.get_mirrored_value();
#     268             1                    ***0***         `uvm_info("SEQ", $sformatf("R3 Write -> Des: %0d Mir: %0d", des, mir), UVM_NONE);
#     269                                                  
#     270             1                    ***0***         regmodel.r3.peek(status, rdata);
#     271             1                    ***0***         `uvm_info(get_type_name(),$sformatf("R3 READ : %0d",rdata),UVM_LOW);
#     272             1                    ***0***         des = regmodel.r3.get();
#     273             1                    ***0***         mir = regmodel.r3.get_mirrored_value();
#     274             1                    ***0***         `uvm_info("SEQ", $sformatf("R3 Des: %0d Mir: %0d", des, mir), UVM_NONE);
#     275                                                  
#     276             1                    ***0***         $display("---------------------------------------------------------R4-------------------------------------------------------");
#     277             1                    ***0***         regmodel.r4.poke(status, 8'h3C);
#     278             1                    ***0***         des = regmodel.r4.get();
#     279             1                    ***0***         mir = regmodel.r4.get_mirrored_value();
#     280             1                    ***0***         `uvm_info("SEQ", $sformatf("R4 Write -> Des: %0d Mir: %0d", des, mir), UVM_NONE);
#     281                                                  
#     282             1                    ***0***         regmodel.r4.peek(status, rdata);
#     283             1                    ***0***         `uvm_info(get_type_name(),$sformatf("R4 READ : %0d",rdata),UVM_LOW);
#     284             1                    ***0***         des = regmodel.r4.get();
#     285             1                    ***0***         mir = regmodel.r4.get_mirrored_value();
#     286             1                    ***0***         `uvm_info("SEQ", $sformatf("R4 Des: %0d Mir: %0d", des, mir), UVM_NONE);
#     287                                               
#     288                                               endtask
#     289                                              endclass
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                       126         0       126       0.0
# 
# ================================Branch Details================================
# 
# Branch Coverage for file ral_sequence.sv --
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               1                    ***0***       `uvm_object_utils(frontdoor_reg_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               2                    ***0***       `uvm_object_utils(frontdoor_reg_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               3                    ***0***       `uvm_object_utils(frontdoor_reg_seq)
#     2               4                    ***0***       `uvm_object_utils(frontdoor_reg_seq)
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               5                    ***0***       `uvm_object_utils(frontdoor_reg_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     2                                    ***0***     Count coming in to IF
#     2               6                    ***0***       `uvm_object_utils(frontdoor_reg_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     16                                   ***0***     Count coming in to IF
#     16              1                    ***0***         `uvm_info("SEQ", $sformatf("ctrl1 Initial Value -> Desired Value : %0d and Mirrored Value : %0d", rdata, rdata_m),UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     22                                   ***0***     Count coming in to IF
#     22              1                    ***0***         `uvm_info("SEQ", $sformatf("ctrl1 After update -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m, dout_t), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     28                                   ***0***     Count coming in to IF
#     28              1                    ***0***         `uvm_info("SEQ", $sformatf("ctrl1 After write -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m,dout_t), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     32                                   ***0***     Count coming in to IF
#     32              1                    ***0***         `uvm_info("SEQ", $sformatf("ctrl1 After read  -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m,dout_t), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     37                                   ***0***     Count coming in to IF
#     37              1                    ***0***         `uvm_info("SEQ", $sformatf("Reg1 Initial Value -> Desired Value : %0d and Mirrored Value : %0d", rdata, rdata_m),UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     43                                   ***0***     Count coming in to IF
#     43              1                    ***0***         `uvm_info("SEQ", $sformatf("Reg1 After update -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m, dout_t), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     49                                   ***0***     Count coming in to IF
#     49              1                    ***0***         `uvm_info("SEQ", $sformatf("Reg1 After write -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m,dout_t), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     53                                   ***0***     Count coming in to IF
#     53              1                    ***0***         `uvm_info("SEQ", $sformatf("Reg1 After read  -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m,dout_t), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     60                                   ***0***     Count coming in to IF
#     60              1                    ***0***     UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     66                                   ***0***     Count coming in to IF
#     66              1                    ***0***         `uvm_info("SEQ", $sformatf("Reg2 After update -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m, dout_t), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     72                                   ***0***     Count coming in to IF
#     72              1                    ***0***         `uvm_info("SEQ", $sformatf("Reg2 After write -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m,dout_t), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     76                                   ***0***     Count coming in to IF
#     76              1                    ***0***         `uvm_info("SEQ", $sformatf("Reg2 After read  -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m,dout_t), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     81                                   ***0***     Count coming in to IF
#     81              1                    ***0***         `uvm_info("SEQ", $sformatf("Reg3 Initial Value -> Desired Value : %0d and Mirrored Value : %0d", rdata, rdata_m),UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     87                                   ***0***     Count coming in to IF
#     87              1                    ***0***         `uvm_info("SEQ", $sformatf("Reg3 After update -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m, dout_t), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     93                                   ***0***     Count coming in to IF
#     93              1                    ***0***         `uvm_info("SEQ", $sformatf("Reg3 After write -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m,dout_t), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     97                                   ***0***     Count coming in to IF
#     97              1                    ***0***         `uvm_info("SEQ", $sformatf("Reg3 After read  -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m,dout_t), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     103                                  ***0***     Count coming in to IF
#     103             1                    ***0***         `uvm_info("SEQ", $sformatf("Reg4 Initial Value -> Desired Value : %0d and Mirrored Value : %0d", rdata, rdata_m),UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     109                                  ***0***     Count coming in to IF
#     109             1                    ***0***         `uvm_info("SEQ", $sformatf("Reg4 After update -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m, dout_t), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     115                                  ***0***     Count coming in to IF
#     115             1                    ***0***         `uvm_info("SEQ", $sformatf("Reg4 After write -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m,dout_t), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     119                                  ***0***     Count coming in to IF
#     119             1                    ***0***         `uvm_info("SEQ", $sformatf("Reg4 After read  -> Desired: %0d, Mirrored: %0d, Read: %0d", rdata, rdata_m,dout_t), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     126                                  ***0***     Count coming in to IF
#     126             1                    ***0***       `uvm_object_utils(top_reg_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     126                                  ***0***     Count coming in to IF
#     126             2                    ***0***       `uvm_object_utils(top_reg_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     126                                  ***0***     Count coming in to IF
#     126             3                    ***0***       `uvm_object_utils(top_reg_seq)
#     126             4                    ***0***       `uvm_object_utils(top_reg_seq)
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     126                                  ***0***     Count coming in to IF
#     126             5                    ***0***       `uvm_object_utils(top_reg_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     126                                  ***0***     Count coming in to IF
#     126             6                    ***0***       `uvm_object_utils(top_reg_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     142                                  ***0***     Count coming in to IF
#     142             1                    ***0***         `uvm_info("SEQ", $sformatf("R1 Reset Value added : %0h ", rst_status), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     146                                  ***0***     Count coming in to IF
#     146             1                    ***0***         `uvm_info("SEQ", $sformatf("R1 Register Reset Value : %0h ", rst_reg), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     151                                  ***0***     Count coming in to IF
#     151             1                    ***0***         `uvm_info("SEQ", $sformatf("R1 Before Reset -> Mir : %0h Des : %0h ", rdata_m, rdata), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     158                                  ***0***     Count coming in to IF
#     158             1                    ***0***         `uvm_info("SEQ", $sformatf("R1 After Reset -> Mir : %0h Des : %0h ", rdata_m, rdata), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     163                                  ***0***     Count coming in to IF
#     163             1                    ***0***         `uvm_info("SEQ", $sformatf("R2 Reset Value added : %0h ", rst_status), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     167                                  ***0***     Count coming in to IF
#     167             1                    ***0***         `uvm_info("SEQ", $sformatf("R2 Register Reset Value : %0h ", rst_reg), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     172                                  ***0***     Count coming in to IF
#     172             1                    ***0***         `uvm_info("SEQ", $sformatf("R2 Before Reset -> Mir : %0h Des : %0h ", rdata_m, rdata), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     179                                  ***0***     Count coming in to IF
#     179             1                    ***0***         `uvm_info("SEQ", $sformatf("R2 After Reset -> Mir : %0h Des : %0h ", rdata_m, rdata), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     184                                  ***0***     Count coming in to IF
#     184             1                    ***0***         `uvm_info("SEQ", $sformatf("R3 Reset Value added : %0h ", rst_status), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     188                                  ***0***     Count coming in to IF
#     188             1                    ***0***         `uvm_info("SEQ", $sformatf("R3 Register Reset Value : %0h ", rst_reg), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     193                                  ***0***     Count coming in to IF
#     193             1                    ***0***         `uvm_info("SEQ", $sformatf("R3 Before Reset -> Mir : %0h Des : %0h ", rdata_m, rdata), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     200                                  ***0***     Count coming in to IF
#     200             1                    ***0***         `uvm_info("SEQ", $sformatf("R3 After Reset -> Mir : %0h Des : %0h ", rdata_m, rdata), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     205                                  ***0***     Count coming in to IF
#     205             1                    ***0***         `uvm_info("SEQ", $sformatf("R4 Reset Value added : %0h ", rst_status), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     209                                  ***0***     Count coming in to IF
#     209             1                    ***0***         `uvm_info("SEQ", $sformatf("R4 Register Reset Value : %0h ", rst_reg), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     214                                  ***0***     Count coming in to IF
#     214             1                    ***0***         `uvm_info("SEQ", $sformatf("R4 Before Reset -> Mir : %0h Des : %0h ", rdata_m, rdata), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     221                                  ***0***     Count coming in to IF
#     221             1                    ***0***         `uvm_info("SEQ", $sformatf("R4 After Reset -> Mir : %0h Des : %0h ", rdata_m, rdata), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     227                                  ***0***     Count coming in to IF
#     227             1                    ***0***     `uvm_object_utils(backdoor_reg_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     227                                  ***0***     Count coming in to IF
#     227             2                    ***0***     `uvm_object_utils(backdoor_reg_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     227                                  ***0***     Count coming in to IF
#     227             3                    ***0***     `uvm_object_utils(backdoor_reg_seq)
#     227             4                    ***0***     `uvm_object_utils(backdoor_reg_seq)
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     227                                  ***0***     Count coming in to IF
#     227             5                    ***0***     `uvm_object_utils(backdoor_reg_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     227                                  ***0***     Count coming in to IF
#     227             6                    ***0***     `uvm_object_utils(backdoor_reg_seq)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     244                                  ***0***     Count coming in to IF
#     244             1                    ***0***         `uvm_info("SEQ", $sformatf("R1 Write -> Des: %0d Mir: %0d", des, mir), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     247                                  ***0***     Count coming in to IF
#     247             1                    ***0***         `uvm_info(get_type_name(),$sformatf("R1 READ : %0d",rdata),UVM_LOW);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     250                                  ***0***     Count coming in to IF
#     250             1                    ***0***         `uvm_info("SEQ", $sformatf("R1 Des: %0d Mir: %0d", des, mir), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     256                                  ***0***     Count coming in to IF
#     256             1                    ***0***         `uvm_info("SEQ", $sformatf("R2 Write -> Des: %0d Mir: %0d", des, mir), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     259                                  ***0***     Count coming in to IF
#     259             1                    ***0***         `uvm_info(get_type_name(),$sformatf("R2 READ : %0d",rdata),UVM_LOW);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     262                                  ***0***     Count coming in to IF
#     262             1                    ***0***         `uvm_info("SEQ", $sformatf("R2 Des: %0d Mir: %0d", des, mir), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     268                                  ***0***     Count coming in to IF
#     268             1                    ***0***         `uvm_info("SEQ", $sformatf("R3 Write -> Des: %0d Mir: %0d", des, mir), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     271                                  ***0***     Count coming in to IF
#     271             1                    ***0***         `uvm_info(get_type_name(),$sformatf("R3 READ : %0d",rdata),UVM_LOW);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     274                                  ***0***     Count coming in to IF
#     274             1                    ***0***         `uvm_info("SEQ", $sformatf("R3 Des: %0d Mir: %0d", des, mir), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     280                                  ***0***     Count coming in to IF
#     280             1                    ***0***         `uvm_info("SEQ", $sformatf("R4 Write -> Des: %0d Mir: %0d", des, mir), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     283                                  ***0***     Count coming in to IF
#     283             1                    ***0***         `uvm_info(get_type_name(),$sformatf("R4 READ : %0d",rdata),UVM_LOW);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     286                                  ***0***     Count coming in to IF
#     286             1                    ***0***         `uvm_info("SEQ", $sformatf("R4 Des: %0d Mir: %0d", des, mir), UVM_NONE);
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# 
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      0         0         0     100.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File ral_sequence.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
# 
# Total Node Count     =          0 
# Toggled Node Count   =          0 
# Untoggled Node Count =          0 
# 
# Toggle Coverage      =      100.0% (0 of 0 bins)
# 
# =================================================================================
# === File: ral_sequencer.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                            4         0         4       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file ral_sequencer.sv --
# 
#     1                                                class apb_sequencer extends uvm_sequencer#(apb_transaction);
#     2               1                    ***0***       `uvm_component_utils(apb_sequencer)
#     2               2                    ***0***     
#     2               3                    ***0***     
#     3                                                  function new(string name = "apb_sequencer",uvm_component parent);
#     4               1                    ***0***         super.new(name, parent);
#     5                                                  endfunction
#     6                                                endclass
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                         0         0         0     100.0
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      0         0         0     100.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File ral_sequencer.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
# 
# Total Node Count     =          0 
# Toggled Node Count   =          0 
# Untoggled Node Count =          0 
# 
# Toggle Coverage      =      100.0% (0 of 0 bins)
# 
# =================================================================================
# === File: ral_test.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                           56         0        56       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file ral_test.sv --
# 
#     1                                                class apb_frontdoor_test extends uvm_test;
#     2               1                    ***0***       `uvm_component_utils(apb_frontdoor_test)
#     2               2                    ***0***     
#     2               3                    ***0***     
#     3                                                
#     4                                                  function new(input string inst = "apb_frontdoor_test", uvm_component c);
#     5               1                    ***0***         super.new(inst, c);
#     6                                                  endfunction
#     7                                                
#     8                                                  apb_env env;
#     9                                                  frontdoor_reg_seq trseq;
#     10                                               
#     11                                                 virtual function void build_phase(uvm_phase phase);
#     12              1                    ***0***         super.build_phase(phase);
#     13              1                    ***0***         env = apb_env::type_id::create("apb_env", this);
#     14              1                    ***0***         trseq = frontdoor_reg_seq::type_id::create("trseq");
#     15                                                 endfunction
#     16                                               
#     17                                                 virtual task run_phase(uvm_phase phase);
#     18              1                    ***0***         phase.raise_objection(this);
#     19              1                    ***0***         trseq.regmodel = env.regmodel;
#     20              1                    ***0***         trseq.start(env.agent_inst.seqr);
#     21              1                    ***0***         phase.drop_objection(this);
#     22              1                    ***0***         phase.phase_done.set_drain_time(this, 20);
#     23                                                 endtask
#     24                                               endclass
#     25                                               
#     26                                               ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#     27                                               class apb_reset_test extends uvm_test;
#     28              1                    ***0***       `uvm_component_utils(apb_reset_test)
#     28              2                    ***0***     
#     28              3                    ***0***     
#     29                                               
#     30                                                 function new(input string inst = "apb_reset_test", uvm_component c);
#     31              1                    ***0***         super.new(inst, c);
#     32                                                 endfunction
#     33                                               
#     34                                                 apb_env env;
#     35                                                 top_reg_seq trseq;
#     36                                               
#     37                                                 virtual function void build_phase(uvm_phase phase);
#     38              1                    ***0***         super.build_phase(phase);
#     39              1                    ***0***         env = apb_env::type_id::create("apb_env", this);
#     40              1                    ***0***         trseq = top_reg_seq::type_id::create("trseq");
#     41                                                 endfunction
#     42                                               
#     43                                                 virtual task run_phase(uvm_phase phase);
#     44              1                    ***0***         phase.raise_objection(this);
#     45              1                    ***0***         trseq.regmodel = env.regmodel;
#     46              1                    ***0***         trseq.start(env.agent_inst.seqr);
#     47              1                    ***0***         phase.drop_objection(this);
#     48              1                    ***0***         phase.phase_done.set_drain_time(this, 20);
#     49                                                 endtask
#     50                                               endclass
#     51                                               ////////////////////////////////////////////////////////////////////////////////////////////
#     52                                               class apb_backdoor_test extends uvm_test;
#     53              1                    ***0***       `uvm_component_utils(apb_backdoor_test)
#     53              2                    ***0***     
#     53              3                    ***0***     
#     54                                               
#     55                                                 function new(input string inst = "apb_backdoor_test", uvm_component c);
#     56              1                    ***0***         super.new(inst, c);
#     57                                                 endfunction
#     58                                               
#     59                                                 apb_env env;
#     60                                                 backdoor_reg_seq trseq;
#     61                                               
#     62                                                 virtual function void build_phase(uvm_phase phase);
#     63              1                    ***0***         super.build_phase(phase);
#     64              1                    ***0***         env = apb_env::type_id::create("apb_env", this);
#     65              1                    ***0***         trseq = backdoor_reg_seq::type_id::create("trseq");
#     66                                                 endfunction
#     67                                               
#     68                                                 virtual task run_phase(uvm_phase phase);
#     69              1                    ***0***         phase.raise_objection(this);
#     70              1                    ***0***         trseq.regmodel = env.regmodel;
#     71              1                    ***0***         trseq.start(env.agent_inst.seqr);
#     72              1                    ***0***         phase.drop_objection(this);
#     73              1                    ***0***         phase.phase_done.set_drain_time(this, 20);
#     74                                                 endtask
#     75                                               endclass
#     76                                               
#     77                                               //////////////////////////////////////////////////////////////////////////////////////////
#     78                                               class reg_test extends uvm_test;
#     79              1                    ***0***       `uvm_component_utils(reg_test)
#     79              2                    ***0***     
#     79              3                    ***0***     
#     80                                                 
#     81                                                 apb_env env;
#     82                                                 frontdoor_reg_seq pkt1;
#     83                                                 top_reg_seq pkt2;
#     84                                                 
#     85                                                 function new(string name = "reg_test",uvm_component parent);
#     86              1                    ***0***         super.new(name,parent);
#     87                                                 endfunction
#     88                                               
#     89                                                 virtual function void build_phase(uvm_phase phase);
#     90              1                    ***0***        super.build_phase(phase);
#     91              1                    ***0***         env = apb_env::type_id::create("apb_env", this);
#     92              1                    ***0***         pkt1 = frontdoor_reg_seq::type_id::create("pkt1", this);
#     93              1                    ***0***         pkt2 = top_reg_seq::type_id::create("pkt2", this);
#     94                                                 endfunction
#     95                                               
#     96                                                 virtual function void end_of_elaboration();
#     97              1                    ***0***          uvm_top.print_topology();
#     98                                                 endfunction
#     99                                               
#     100                                                task run_phase (uvm_phase phase);
#     101             1                    ***0***         super.run_phase(phase);
#     102             1                    ***0***         phase.raise_objection (this);
#     103             1                    ***0***         pkt1.regmodel = env.regmodel;
#     104             1                    ***0***         pkt1.start(env.agent_inst.seqr); 
#     105             1                    ***0***         phase.drop_objection (this);
#     106             1                    ***0***         phase.phase_done.set_drain_time(this,20);
#     107                                              
#     108                                                  
#     109             1                    ***0***         phase.raise_objection (this);
#     110             1                    ***0***         pkt2.regmodel = env.regmodel;
#     111             1                    ***0***         pkt2.start(env.agent_inst.seqr); 
#     112             1                    ***0***         phase.drop_objection (this);
#     113             1                    ***0***         phase.phase_done.set_drain_time(this,20);
#     114                                              
#     115                                                endtask
#     116                                              endclass
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                         0         0         0     100.0
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      0         0         0     100.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File ral_test.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
# 
# Total Node Count     =          0 
# Toggled Node Count   =          0 
# Untoggled Node Count =          0 
# 
# Toggle Coverage      =      100.0% (0 of 0 bins)
# 
# =================================================================================
# === File: ral_top.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                           10         0        10       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file ral_top.sv --
# 
#     1                                                
#     2                                                `include "uvm_macros.svh"
#     3                                                import uvm_pkg::*;  
#     4                                                `include "ral_pkg.sv"
#     5                                                `include "design.v"
#     6                                                
#     7                                                module tb;
#     8                                                 bit PCLK, PRESETn;
#     9                                                 
#     10                                                initial begin
#     11              1                    ***0***       PCLK = 0;
#     12              1                    ***0***       PRESETn = 0;
#     13              1                    ***0***       #10 PRESETn = 1;
#     13              2                    ***0***     
#     14                                                end
#     15                                               
#     16                                                ral_if vif(.PCLK(PCLK),.PRESETn(PRESETn));
#     17                                                top dut(.pclk(vif.PCLK),
#     18                                                        .presetn(vif.PRESETn),
#     19                                                        .psel(vif.PSEL),
#     20                                                        .penable(vif.PENABLE),
#     21                                                        .pwrite(vif.PWRITE),
#     22                                                        .paddr(vif.PADDR),
#     23                                                        .pwdata(vif.PWDATA),
#     24                                                        .prdata(vif.PRDATA));
#     25                                                
#     26              1                    ***0***      always #5 PCLK = ~PCLK;
#     26              2                    ***0***     
#     27                                                
#     28                                                initial begin
#     29              1                    ***0***       uvm_config_db#(virtual ral_if)::set(null,"*","vif",vif);
#     30              1                    ***0***       run_test("reg_test");
#     31                                                end
#     32                                                 
#     33                                                initial begin
#     34              1                    ***0***       $dumpfile("dump.vcd");
#     35              1                    ***0***       $dumpvars;
#     36                                                 end
#     37                                               endmodule
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                         0         0         0     100.0
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      4         0         4       0.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File ral_top.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
#           8                                PRESETn           0           0        0.00 
#           8                                   PCLK           0           0        0.00 
# 
# Total Node Count     =          2 
# Toggled Node Count   =          0 
# Untoggled Node Count =          2 
# 
# Toggle Coverage      =        0.0% (0 of 4 bins)
# 
# =================================================================================
# === File: ral_transaction.sv
# =================================================================================
# Statement Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Stmts                           11         0        11       0.0
# 
# ================================Statement Details================================
# 
# Statement Coverage for file ral_transaction.sv --
# 
#     1                                                class apb_transaction extends uvm_sequence_item;
#     2                                                  
#     3                                                  rand bit PWRITE;
#     4                                                  rand bit PSEL;
#     5                                                  rand bit PENABLE;
#     6                                                  rand bit [31:0] PADDR;
#     7                                                  rand bit [31:0] PWDATA;
#     8                                                       bit [31:0] PRDATA;
#     9                                                  
#     10              1                    ***0***       `uvm_object_utils(apb_transaction)
#     10              2                    ***0***     
#     10              3                    ***0***     
#     10              4                    ***0***     
#     10              5                    ***0***     
#     10              6                    ***0***     
#     10              7                    ***0***     
#     10              8                    ***0***     
#     10              9                    ***0***     
#     10             10                    ***0***     
#     11                                               
#     12                                                 function new(string name = "apb_transaction");
#     13              1                    ***0***         super.new(name);
#     14                                                 endfunction
#     15                                               
#     16                                                 constraint c0{PADDR inside {0, 4, 8, 12, 16};}
#     17                                               endclass
#     18                                               
# 
# Branch Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Branches                        10         0        10       0.0
# 
# ================================Branch Details================================
# 
# Branch Coverage for file ral_transaction.sv --
# 
# ------------------------------------IF Branch------------------------------------
#     10                                   ***0***     Count coming in to IF
#     10              1                    ***0***       `uvm_object_utils(apb_transaction)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     10                                   ***0***     Count coming in to IF
#     10              2                    ***0***       `uvm_object_utils(apb_transaction)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     10                                   ***0***     Count coming in to IF
#     10              3                    ***0***       `uvm_object_utils(apb_transaction)
#     10              4                    ***0***       `uvm_object_utils(apb_transaction)
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     10                                   ***0***     Count coming in to IF
#     10              5                    ***0***       `uvm_object_utils(apb_transaction)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# ------------------------------------IF Branch------------------------------------
#     10                                   ***0***     Count coming in to IF
#     10              6                    ***0***       `uvm_object_utils(apb_transaction)
#                                          ***0***     All False Count
# Branch totals: 0 hits of 2 branches = 0.0%
# 
# 
# Condition Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Condition Terms              0         0         0     100.0
# Expression Coverage:
#     Enabled Coverage            Active   Covered    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FEC Expression Terms             0         0         0     100.0
# FSM Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     FSMs                                                       100.0
#         States                       0         0         0     100.0
#         Transitions                  0         0         0     100.0
# Toggle Coverage:
#     Enabled Coverage            Active      Hits    Misses % Covered
#     ----------------            ------      ----    ------ ---------
#     Toggle Bins                      0         0         0     100.0
# 
# ================================Toggle Details================================
# 
# Toggle Coverage for File ral_transaction.sv --
# 
#        Line                                   Node      1H->0L      0L->1H  "Coverage"
# --------------------------------------------------------------------------------------
# 
# Total Node Count     =          0 
# Toggled Node Count   =          0 
# Untoggled Node Count =          0 
# 
# Toggle Coverage      =      100.0% (0 of 0 bins)
# 
# 
# Total Coverage By File (code coverage only, filtered view): 0.0%
# 
# 
# run -all
# ----------------------------------------------------------------
# UVM-1.1d
# (C) 2007-2013 Mentor Graphics Corporation
# (C) 2007-2013 Cadence Design Systems, Inc.
# (C) 2006-2013 Synopsys, Inc.
# (C) 2011-2013 Cypress Semiconductor Corp.
# ----------------------------------------------------------------
# 
#   ***********       IMPORTANT RELEASE NOTES         ************
# 
#   You are using a version of the UVM library that has been compiled
#   with `UVM_NO_DEPRECATED undefined.
#   See http://www.eda.org/svdb/view.php?id=3313 for more details.
# 
#   You are using a version of the UVM library that has been compiled
#   with `UVM_OBJECT_MUST_HAVE_CONSTRUCTOR undefined.
#   See http://www.eda.org/svdb/view.php?id=3770 for more details.
# 
#       (Specify +UVM_NO_RELNOTES to turn off this notice)
# 
# UVM_INFO verilog_src/questa_uvm_pkg-1.2/src/questa_uvm_pkg.sv(215) @ 0: reporter [Questa UVM] QUESTA_UVM-1.2.3
# UVM_INFO verilog_src/questa_uvm_pkg-1.2/src/questa_uvm_pkg.sv(217) @ 0: reporter [Questa UVM]  questa_uvm::init(+struct)
# UVM_INFO @ 0: reporter [RNTST] Running test reg_test...
# UVM_INFO @ 0: reporter [UVMTOP] UVM testbench topology:
# --------------------------------------------------------------
# Name                       Type                    Size  Value
# --------------------------------------------------------------
# uvm_test_top               reg_test                -     @471 
#   apb_env                  apb_env                 -     @478 
#     agent_inst             apb_agent               -     @493 
#       drv                  apb_driver              -     @552 
#         rsp_port           uvm_analysis_port       -     @567 
#         seq_item_port      uvm_seq_item_pull_port  -     @559 
#       mon                  apb_monitor             -     @684 
#         mon_ap             uvm_analysis_port       -     @692 
#       seqr                 apb_sequencer           -     @575 
#         rsp_export         uvm_analysis_export     -     @582 
#         seq_item_export    uvm_seq_item_pull_imp   -     @676 
#         arbitration_queue  array                   0     -    
#         lock_queue         array                   0     -    
#         num_last_reqs      integral                32    'd1  
#         num_last_rsps      integral                32    'd1  
#     sc                     apb_scoreboard          -     @503 
#       mon_port             uvm_analysis_imp        -     @510 
# --------------------------------------------------------------
# 
# ------------------------------------------------------------ctrl1--------------------------------------------------
# UVM_INFO ral_sequence.sv(16) @ 0: uvm_test_top.apb_env.agent_inst.seqr@@pkt1 [SEQ] ctrl1 Initial Value -> Desired Value : 0 and Mirrored Value : 0
# UVM_INFO ral_sequence.sv(22) @ 0: uvm_test_top.apb_env.agent_inst.seqr@@pkt1 [SEQ] ctrl1 After update -> Desired: 15, Mirrored: 0, Read: 0
# UVM_INFO ral_driver.sv(37) @ 25: uvm_test_top.apb_env.agent_inst.drv [DRV] Data Write -> Wdata : f
# UVM_INFO ral_monitor.sv(30) @ 25: uvm_test_top.apb_env.agent_inst.mon [MON] PWRITE :1 PADDR : 0 PWDATA:15 PRDATA:0
# UVM_INFO ral_monitor.sv(32) @ 25: uvm_test_top.apb_env.agent_inst.mon [MON] ---------------------------------MONITOR DONE--------------------------------------------
# UVM_INFO ral_scoreboard.sv(40) @ 25: uvm_test_top.apb_env.sc [SCOREBOARD--------WRITE] WRITE: Addr = 0, Data = 15
# UVM_INFO ral_scoreboard.sv(48) @ 25: uvm_test_top.apb_env.sc [SCOREBOARD] ---------------------------------------SCOREBOARD DONE--------------------------------------
# UVM_INFO ral_driver.sv(57) @ 35: uvm_test_top.apb_env.agent_inst.drv [drv] -----------------------------------DRIVER DONE--------------------
# UVM_INFO ral_sequence.sv(28) @ 35: uvm_test_top.apb_env.agent_inst.seqr@@pkt1 [SEQ] ctrl1 After write -> Desired: 15, Mirrored: 15, Read: 0
# UVM_INFO ral_monitor.sv(30) @ 55: uvm_test_top.apb_env.agent_inst.mon [MON] PWRITE :0 PADDR : 0 PWDATA:15 PRDATA:0
# UVM_INFO ral_monitor.sv(32) @ 55: uvm_test_top.apb_env.agent_inst.mon [MON] ---------------------------------MONITOR DONE--------------------------------------------
# UVM_ERROR ral_scoreboard.sv(43) @ 55: uvm_test_top.apb_env.sc [SCOREBOARD----------MISMATCH] Mismatch at Addr = 0, Expected = f, Received = 0
# UVM_INFO ral_scoreboard.sv(48) @ 55: uvm_test_top.apb_env.sc [SCOREBOARD] ---------------------------------------SCOREBOARD DONE--------------------------------------
# UVM_INFO ral_driver.sv(51) @ 65: uvm_test_top.apb_env.agent_inst.drv [DRV] Data READ -> read data : 0
# UVM_INFO ral_driver.sv(57) @ 75: uvm_test_top.apb_env.agent_inst.drv [drv] -----------------------------------DRIVER DONE--------------------
# UVM_INFO ral_sequence.sv(32) @ 75: uvm_test_top.apb_env.agent_inst.seqr@@pkt1 [SEQ] ctrl1 After read  -> Desired: 0, Mirrored: 0, Read: 0
# ------------------------------------------------------------R1--------------------------------------------------
# UVM_INFO ral_sequence.sv(37) @ 75: uvm_test_top.apb_env.agent_inst.seqr@@pkt1 [SEQ] Reg1 Initial Value -> Desired Value : 0 and Mirrored Value : 0
# UVM_INFO ral_sequence.sv(43) @ 75: uvm_test_top.apb_env.agent_inst.seqr@@pkt1 [SEQ] Reg1 After update -> Desired: 4294967295, Mirrored: 0, Read: 0
# UVM_INFO ral_monitor.sv(30) @ 85: uvm_test_top.apb_env.agent_inst.mon [MON] PWRITE :0 PADDR : 0 PWDATA:15 PRDATA:15
# UVM_INFO ral_monitor.sv(32) @ 85: uvm_test_top.apb_env.agent_inst.mon [MON] ---------------------------------MONITOR DONE--------------------------------------------
# UVM_INFO ral_scoreboard.sv(45) @ 85: uvm_test_top.apb_env.sc [SCOREBOARD---------MATCH] READ MATCH: Addr = 0, Data = f
# UVM_INFO ral_scoreboard.sv(48) @ 85: uvm_test_top.apb_env.sc [SCOREBOARD] ---------------------------------------SCOREBOARD DONE--------------------------------------
# UVM_INFO ral_driver.sv(37) @ 105: uvm_test_top.apb_env.agent_inst.drv [DRV] Data Write -> Wdata : ffffffff
# UVM_INFO ral_monitor.sv(30) @ 115: uvm_test_top.apb_env.agent_inst.mon [MON] PWRITE :1 PADDR : 4 PWDATA:4294967295 PRDATA:15
# UVM_INFO ral_monitor.sv(32) @ 115: uvm_test_top.apb_env.agent_inst.mon [MON] ---------------------------------MONITOR DONE--------------------------------------------
# UVM_INFO ral_driver.sv(57) @ 115: uvm_test_top.apb_env.agent_inst.drv [drv] -----------------------------------DRIVER DONE--------------------
# UVM_INFO ral_scoreboard.sv(40) @ 115: uvm_test_top.apb_env.sc [SCOREBOARD--------WRITE] WRITE: Addr = 4, Data = 4294967295
# UVM_INFO ral_scoreboard.sv(48) @ 115: uvm_test_top.apb_env.sc [SCOREBOARD] ---------------------------------------SCOREBOARD DONE--------------------------------------
# UVM_INFO ral_sequence.sv(49) @ 115: uvm_test_top.apb_env.agent_inst.seqr@@pkt1 [SEQ] Reg1 After write -> Desired: 4294967295, Mirrored: 4294967295, Read: 0
# UVM_INFO ral_driver.sv(51) @ 145: uvm_test_top.apb_env.agent_inst.drv [DRV] Data READ -> read data : f
# UVM_INFO ral_monitor.sv(30) @ 145: uvm_test_top.apb_env.agent_inst.mon [MON] PWRITE :0 PADDR : 4 PWDATA:4294967295 PRDATA:15
# UVM_INFO ral_monitor.sv(32) @ 145: uvm_test_top.apb_env.agent_inst.mon [MON] ---------------------------------MONITOR DONE--------------------------------------------
# UVM_ERROR ral_scoreboard.sv(43) @ 145: uvm_test_top.apb_env.sc [SCOREBOARD----------MISMATCH] Mismatch at Addr = 4, Expected = ffffffff, Received = f
# UVM_INFO ral_scoreboard.sv(48) @ 145: uvm_test_top.apb_env.sc [SCOREBOARD] ---------------------------------------SCOREBOARD DONE--------------------------------------
# UVM_INFO ral_driver.sv(57) @ 155: uvm_test_top.apb_env.agent_inst.drv [drv] -----------------------------------DRIVER DONE--------------------
# UVM_INFO ral_sequence.sv(53) @ 155: uvm_test_top.apb_env.agent_inst.seqr@@pkt1 [SEQ] Reg1 After read  -> Desired: 15, Mirrored: 15, Read: 15
# ------------------------------------------------------------R2--------------------------------------------------
# UVM_INFO ral_sequence.sv(60) @ 155: uvm_test_top.apb_env.agent_inst.seqr@@pkt1 [SEQ] Reg2 Initial Value -> Desired Value : 0 and Mirrored Value : 0
# UVM_INFO ral_sequence.sv(66) @ 155: uvm_test_top.apb_env.agent_inst.seqr@@pkt1 [SEQ] Reg2 After update -> Desired: 2863311530, Mirrored: 0, Read: 15
# UVM_INFO ral_monitor.sv(30) @ 175: uvm_test_top.apb_env.agent_inst.mon [MON] PWRITE :1 PADDR : 8 PWDATA:2863311530 PRDATA:4294967295
# UVM_INFO ral_monitor.sv(32) @ 175: uvm_test_top.apb_env.agent_inst.mon [MON] ---------------------------------MONITOR DONE--------------------------------------------
# UVM_INFO ral_scoreboard.sv(40) @ 175: uvm_test_top.apb_env.sc [SCOREBOARD--------WRITE] WRITE: Addr = 8, Data = 2863311530
# UVM_INFO ral_scoreboard.sv(48) @ 175: uvm_test_top.apb_env.sc [SCOREBOARD] ---------------------------------------SCOREBOARD DONE--------------------------------------
# UVM_INFO ral_driver.sv(37) @ 185: uvm_test_top.apb_env.agent_inst.drv [DRV] Data Write -> Wdata : aaaaaaaa
# UVM_INFO ral_driver.sv(57) @ 195: uvm_test_top.apb_env.agent_inst.drv [drv] -----------------------------------DRIVER DONE--------------------
# UVM_INFO ral_sequence.sv(72) @ 195: uvm_test_top.apb_env.agent_inst.seqr@@pkt1 [SEQ] Reg2 After write -> Desired: 2863311530, Mirrored: 2863311530, Read: 15
# UVM_INFO ral_monitor.sv(30) @ 205: uvm_test_top.apb_env.agent_inst.mon [MON] PWRITE :1 PADDR : 8 PWDATA:2863311530 PRDATA:4294967295
# UVM_INFO ral_monitor.sv(32) @ 205: uvm_test_top.apb_env.agent_inst.mon [MON] ---------------------------------MONITOR DONE--------------------------------------------
# UVM_INFO ral_scoreboard.sv(40) @ 205: uvm_test_top.apb_env.sc [SCOREBOARD--------WRITE] WRITE: Addr = 8, Data = 2863311530
# UVM_INFO ral_scoreboard.sv(48) @ 205: uvm_test_top.apb_env.sc [SCOREBOARD] ---------------------------------------SCOREBOARD DONE--------------------------------------
# UVM_INFO ral_driver.sv(51) @ 225: uvm_test_top.apb_env.agent_inst.drv [DRV] Data READ -> read data : ffffffff
# UVM_INFO ral_monitor.sv(30) @ 235: uvm_test_top.apb_env.agent_inst.mon [MON] PWRITE :0 PADDR : 8 PWDATA:2863311530 PRDATA:4294967295
# UVM_INFO ral_monitor.sv(32) @ 235: uvm_test_top.apb_env.agent_inst.mon [MON] ---------------------------------MONITOR DONE--------------------------------------------
# UVM_INFO ral_driver.sv(57) @ 235: uvm_test_top.apb_env.agent_inst.drv [drv] -----------------------------------DRIVER DONE--------------------
# UVM_ERROR ral_scoreboard.sv(43) @ 235: uvm_test_top.apb_env.sc [SCOREBOARD----------MISMATCH] Mismatch at Addr = 8, Expected = aaaaaaaa, Received = ffffffff
# UVM_INFO ral_scoreboard.sv(48) @ 235: uvm_test_top.apb_env.sc [SCOREBOARD] ---------------------------------------SCOREBOARD DONE--------------------------------------
# UVM_INFO ral_sequence.sv(76) @ 235: uvm_test_top.apb_env.agent_inst.seqr@@pkt1 [SEQ] Reg2 After read  -> Desired: 4294967295, Mirrored: 4294967295, Read: 4294967295
# ------------------------------------------------------------R3-------------------------------------------------
# UVM_INFO ral_sequence.sv(81) @ 235: uvm_test_top.apb_env.agent_inst.seqr@@pkt1 [SEQ] Reg3 Initial Value -> Desired Value : 0 and Mirrored Value : 0
# UVM_INFO ral_sequence.sv(87) @ 235: uvm_test_top.apb_env.agent_inst.seqr@@pkt1 [SEQ] Reg3 After update -> Desired: 4294967295, Mirrored: 0, Read: 4294967295
# UVM_INFO ral_driver.sv(37) @ 265: uvm_test_top.apb_env.agent_inst.drv [DRV] Data Write -> Wdata : ffffffff
# UVM_INFO ral_monitor.sv(30) @ 265: uvm_test_top.apb_env.agent_inst.mon [MON] PWRITE :1 PADDR : 12 PWDATA:4294967295 PRDATA:2863311530
# UVM_INFO ral_monitor.sv(32) @ 265: uvm_test_top.apb_env.agent_inst.mon [MON] ---------------------------------MONITOR DONE--------------------------------------------
# UVM_INFO ral_scoreboard.sv(40) @ 265: uvm_test_top.apb_env.sc [SCOREBOARD--------WRITE] WRITE: Addr = c, Data = 4294967295
# UVM_INFO ral_scoreboard.sv(48) @ 265: uvm_test_top.apb_env.sc [SCOREBOARD] ---------------------------------------SCOREBOARD DONE--------------------------------------
# UVM_INFO ral_driver.sv(57) @ 275: uvm_test_top.apb_env.agent_inst.drv [drv] -----------------------------------DRIVER DONE--------------------
# UVM_INFO ral_sequence.sv(93) @ 275: uvm_test_top.apb_env.agent_inst.seqr@@pkt1 [SEQ] Reg3 After write -> Desired: 4294967295, Mirrored: 4294967295, Read: 4294967295
# UVM_INFO ral_monitor.sv(30) @ 295: uvm_test_top.apb_env.agent_inst.mon [MON] PWRITE :0 PADDR : 12 PWDATA:4294967295 PRDATA:2863311530
# UVM_INFO ral_monitor.sv(32) @ 295: uvm_test_top.apb_env.agent_inst.mon [MON] ---------------------------------MONITOR DONE--------------------------------------------
# UVM_ERROR ral_scoreboard.sv(43) @ 295: uvm_test_top.apb_env.sc [SCOREBOARD----------MISMATCH] Mismatch at Addr = c, Expected = ffffffff, Received = aaaaaaaa
# UVM_INFO ral_scoreboard.sv(48) @ 295: uvm_test_top.apb_env.sc [SCOREBOARD] ---------------------------------------SCOREBOARD DONE--------------------------------------
# UVM_INFO ral_driver.sv(51) @ 305: uvm_test_top.apb_env.agent_inst.drv [DRV] Data READ -> read data : aaaaaaaa
# UVM_INFO ral_driver.sv(57) @ 315: uvm_test_top.apb_env.agent_inst.drv [drv] -----------------------------------DRIVER DONE--------------------
# UVM_INFO ral_sequence.sv(97) @ 315: uvm_test_top.apb_env.agent_inst.seqr@@pkt1 [SEQ] Reg3 After read  -> Desired: 2863311530, Mirrored: 2863311530, Read: 2863311530
# -------------------------------------------------------------R4--------------------------------------------------
# UVM_INFO ral_sequence.sv(103) @ 315: uvm_test_top.apb_env.agent_inst.seqr@@pkt1 [SEQ] Reg4 Initial Value -> Desired Value : 0 and Mirrored Value : 0
# UVM_INFO ral_sequence.sv(109) @ 315: uvm_test_top.apb_env.agent_inst.seqr@@pkt1 [SEQ] Reg4 After update -> Desired: 1010580540, Mirrored: 0, Read: 2863311530
# UVM_INFO ral_monitor.sv(30) @ 325: uvm_test_top.apb_env.agent_inst.mon [MON] PWRITE :0 PADDR : 12 PWDATA:4294967295 PRDATA:4294967295
# UVM_INFO ral_monitor.sv(32) @ 325: uvm_test_top.apb_env.agent_inst.mon [MON] ---------------------------------MONITOR DONE--------------------------------------------
# UVM_INFO ral_scoreboard.sv(45) @ 325: uvm_test_top.apb_env.sc [SCOREBOARD---------MATCH] READ MATCH: Addr = c, Data = ffffffff
# UVM_INFO ral_scoreboard.sv(48) @ 325: uvm_test_top.apb_env.sc [SCOREBOARD] ---------------------------------------SCOREBOARD DONE--------------------------------------
# UVM_INFO ral_driver.sv(37) @ 345: uvm_test_top.apb_env.agent_inst.drv [DRV] Data Write -> Wdata : 3c3c3c3c
# UVM_INFO ral_monitor.sv(30) @ 355: uvm_test_top.apb_env.agent_inst.mon [MON] PWRITE :1 PADDR : 16 PWDATA:1010580540 PRDATA:4294967295
# UVM_INFO ral_monitor.sv(32) @ 355: uvm_test_top.apb_env.agent_inst.mon [MON] ---------------------------------MONITOR DONE--------------------------------------------
# UVM_INFO ral_driver.sv(57) @ 355: uvm_test_top.apb_env.agent_inst.drv [drv] -----------------------------------DRIVER DONE--------------------
# UVM_INFO ral_scoreboard.sv(40) @ 355: uvm_test_top.apb_env.sc [SCOREBOARD--------WRITE] WRITE: Addr = 10, Data = 1010580540
# UVM_INFO ral_scoreboard.sv(48) @ 355: uvm_test_top.apb_env.sc [SCOREBOARD] ---------------------------------------SCOREBOARD DONE--------------------------------------
# UVM_INFO ral_sequence.sv(115) @ 355: uvm_test_top.apb_env.agent_inst.seqr@@pkt1 [SEQ] Reg4 After write -> Desired: 1010580540, Mirrored: 1010580540, Read: 2863311530
# UVM_INFO ral_driver.sv(51) @ 385: uvm_test_top.apb_env.agent_inst.drv [DRV] Data READ -> read data : ffffffff
# UVM_INFO ral_monitor.sv(30) @ 385: uvm_test_top.apb_env.agent_inst.mon [MON] PWRITE :0 PADDR : 16 PWDATA:1010580540 PRDATA:4294967295
# UVM_INFO ral_monitor.sv(32) @ 385: uvm_test_top.apb_env.agent_inst.mon [MON] ---------------------------------MONITOR DONE--------------------------------------------
# UVM_ERROR ral_scoreboard.sv(43) @ 385: uvm_test_top.apb_env.sc [SCOREBOARD----------MISMATCH] Mismatch at Addr = 10, Expected = 0, Received = ffffffff
# UVM_INFO ral_scoreboard.sv(48) @ 385: uvm_test_top.apb_env.sc [SCOREBOARD] ---------------------------------------SCOREBOARD DONE--------------------------------------
# UVM_INFO ral_driver.sv(57) @ 395: uvm_test_top.apb_env.agent_inst.drv [drv] -----------------------------------DRIVER DONE--------------------
# UVM_INFO ral_sequence.sv(119) @ 395: uvm_test_top.apb_env.agent_inst.seqr@@pkt1 [SEQ] Reg4 After read  -> Desired: 4294967295, Mirrored: 4294967295, Read: 4294967295
# -------------------------------------------------------------R1--------------------------------------------------
# UVM_INFO ral_sequence.sv(142) @ 395: uvm_test_top.apb_env.agent_inst.seqr@@pkt2 [SEQ] R1 Reset Value added : 1 
# UVM_INFO ral_sequence.sv(146) @ 395: uvm_test_top.apb_env.agent_inst.seqr@@pkt2 [SEQ] R1 Register Reset Value : a5a50000 
# UVM_INFO ral_sequence.sv(151) @ 395: uvm_test_top.apb_env.agent_inst.seqr@@pkt2 [SEQ] R1 Before Reset -> Mir : f Des : f 
# --------------Applying Reset to register model R1 ---------------
# UVM_INFO ral_sequence.sv(158) @ 395: uvm_test_top.apb_env.agent_inst.seqr@@pkt2 [SEQ] R1 After Reset -> Mir : a5a50000 Des : a5a50000 
# -------------------------------------------------------------R2--------------------------------------------------
# UVM_INFO ral_sequence.sv(163) @ 395: uvm_test_top.apb_env.agent_inst.seqr@@pkt2 [SEQ] R2 Reset Value added : 1 
# UVM_INFO ral_sequence.sv(167) @ 395: uvm_test_top.apb_env.agent_inst.seqr@@pkt2 [SEQ] R2 Register Reset Value : 12349876 
# UVM_INFO ral_sequence.sv(172) @ 395: uvm_test_top.apb_env.agent_inst.seqr@@pkt2 [SEQ] R2 Before Reset -> Mir : ffffffff Des : ffffffff 
# --------------Applying Reset to register model R2---------------
# UVM_INFO ral_sequence.sv(179) @ 395: uvm_test_top.apb_env.agent_inst.seqr@@pkt2 [SEQ] R2 After Reset -> Mir : 12349876 Des : 12349876 
# -------------------------------------------------------------R3--------------------------------------------------
# UVM_INFO ral_sequence.sv(184) @ 395: uvm_test_top.apb_env.agent_inst.seqr@@pkt2 [SEQ] R3 Reset Value added : 1 
# UVM_INFO ral_sequence.sv(188) @ 395: uvm_test_top.apb_env.agent_inst.seqr@@pkt2 [SEQ] R3 Register Reset Value : 5a5a5555 
# UVM_INFO ral_sequence.sv(193) @ 395: uvm_test_top.apb_env.agent_inst.seqr@@pkt2 [SEQ] R3 Before Reset -> Mir : aaaaaaaa Des : aaaaaaaa 
# --------------Applying Reset to register model R3---------------
# UVM_INFO ral_sequence.sv(200) @ 395: uvm_test_top.apb_env.agent_inst.seqr@@pkt2 [SEQ] R3 After Reset -> Mir : 5a5a5555 Des : 5a5a5555 
# -------------------------------------------------------------R4--------------------------------------------------
# UVM_INFO ral_sequence.sv(205) @ 395: uvm_test_top.apb_env.agent_inst.seqr@@pkt2 [SEQ] R4 Reset Value added : 1 
# UVM_INFO ral_sequence.sv(209) @ 395: uvm_test_top.apb_env.agent_inst.seqr@@pkt2 [SEQ] R4 Register Reset Value : ffff 
# UVM_INFO ral_sequence.sv(214) @ 395: uvm_test_top.apb_env.agent_inst.seqr@@pkt2 [SEQ] R4 Before Reset -> Mir : ffffffff Des : ffffffff 
# --------------Applying Reset to register model R4---------------
# UVM_INFO ral_sequence.sv(221) @ 395: uvm_test_top.apb_env.agent_inst.seqr@@pkt2 [SEQ] R4 After Reset -> Mir : ffff Des : ffff 
# UVM_INFO verilog_src/uvm-1.1d/src/base/uvm_objection.svh(1268) @ 415: reporter [TEST_DONE] 'run' phase is ready to proceed to the 'extract' phase
# UVM_INFO ral_monitor.sv(30) @ 415: uvm_test_top.apb_env.agent_inst.mon [MON] PWRITE :0 PADDR : 16 PWDATA:1010580540 PRDATA:1010580540
# UVM_INFO ral_monitor.sv(32) @ 415: uvm_test_top.apb_env.agent_inst.mon [MON] ---------------------------------MONITOR DONE--------------------------------------------
# UVM_ERROR ral_scoreboard.sv(43) @ 415: uvm_test_top.apb_env.sc [SCOREBOARD----------MISMATCH] Mismatch at Addr = 10, Expected = 0, Received = 3c3c3c3c
# UVM_INFO ral_scoreboard.sv(48) @ 415: uvm_test_top.apb_env.sc [SCOREBOARD] ---------------------------------------SCOREBOARD DONE--------------------------------------
# 
# --- UVM Report Summary ---
# 
# ** Report counts by severity
# UVM_INFO :  111
# UVM_WARNING :    0
# UVM_ERROR :    6
# UVM_FATAL :    0
# ** Report counts by id
# [DRV]    10
# [MON]    28
# [Questa UVM]     2
# [RNTST]     1
# [SCOREBOARD]    14
# [SCOREBOARD----------MISMATCH]     6
# [SCOREBOARD---------MATCH]     2
# [SCOREBOARD--------WRITE]     6
# [SEQ]    36
# [TEST_DONE]     1
# [UVMTOP]     1
# [drv]    10
# ** Note: $finish    : /tools/mentor/questasim_10.6c/questasim/linux/../verilog_src/uvm-1.1d/src/base/uvm_root.svh(430)
#    Time: 415 ns  Iteration: 53  Instance: /tb
# Saving coverage database on exit...
# End time: 10:59:01 on Aug 06,2025, Elapsed time: 0:00:03
# Errors: 0, Warnings: 0
